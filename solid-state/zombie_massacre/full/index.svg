<svg xmlns="http://www.w3.org/2000/svg" xmlns:html="http://www.w3.org/1999/xhtml" width="1000" height="800" style="background-Color: black;">
	<!--
		Zombie Massacre - Official Game
		Adapted from HKUST Summer Institute SISP 1305 Group 1 Project

		(c) Donald Leung.  All rights reserved.
		NOTE: ANYONE FOUND COPYING, MODIFYING AND/OR REDISTRIBUTING THIS GAME WITHOUT MY EXPLICIT PERMISSION WILL BE BROUGHT TO JUSTICE IN COURT AND MAY FACE IMPRISONMENT.
	-->
	<title>Zombie Massacre</title>
	<script>
		<![CDATA[
			"use strict";
			var player;
			var normalZombie1, normalZombie2, normalZombie3, normalZombie4, normalZombiesLeft = 4;
			var hardZombie1, hardZombie2, hardZombie3, hardZombie4, hardZombiesLeft = 4;
			var minionZombie1, minionZombie2;
			var bossZombie;
			var largeZombie1, largeZombie2, largeZombie3, largeZombie4, largeZombiesLeft = 4;
			var gigaZombie1, gigaZombie2, gigaZombie3, gigaZombie4, gigaZombiesLeft = 4;
			var powerfulBossZombie, largeMinionZombie1, largeMinionZombie2;
			var leaderZombie1, leaderZombie2, followerZombie11, followerZombie12, followerZombie21, followerZombie22, leaderZombiesLeft = 2;
			var shieldZombie1, shieldZombie2, shieldZombiesLeft = 2;
			var finalBoss;

			function showInstructions() {
				document.getElementById("startButton").setAttribute("onmousedown", "");
				document.getElementById("startScreen").setAttribute("visibility", "hidden");
				document.getElementById("instructions").setAttribute("visibility", "visible");
				document.getElementById("buttonClick").play();
			}
			function init() {
				document.getElementById("proceed").setAttribute("onmousedown", "");
				document.getElementById("instructions").setAttribute("visibility", "hidden");
				document.getElementById("gameScene").setAttribute("visibility", "visible");
				document.getElementById("buttonClick").play();
				startGame();
			}
			function startGame() {
				player = {
					x: 500,
					y: 400,
					r: 50,
					svgEquiv: document.getElementById("player"),
					move: function(dir) {
						switch (dir) {
							case "left":
							player.x -= 15;
							break;
							case "right":
							player.x += 15;
							break;
							case "up":
							player.y -= 15;
							break;
							case "down":
							player.y += 15;
							break;
							default:
							alert("ERROR!  THIS DIRECTION DOES NOT EXIST!  CHECK YOUR CODE!");
						}
						player.svgEquiv.setAttribute("transform", "translate("+player.x+" "+player.y+")");
					},
					init: function() {
						player.svgEquiv.setAttribute("transform", "translate("+player.x+" "+player.y+")");
						player.svgEquiv.setAttribute("visibility", "visible");
					},
					preventEscape: function() {
						if (player.x < 0) {
							player.x = 0;
						} else if (player.y < 0) {
							player.y = 0;
						} else if (player.x > 1000) {
							player.x = 1000;
						} else if (player.y > 800) {
							player.y = 800;
						} else {
							void(0);
						}
						player.svgEquiv.setAttribute("transform", "translate("+player.x+" "+player.y+")");
					}
				};
				player.init();
				document.onkeydown = function(event) {
					/*
						Key Codes
						---------
						W = 87
						A = 65
						S = 83
						D = 68
					*/
					switch (event.keyCode) {
						case 87:
						player.move("up");
						break;
						case 65:
						player.move("left");
						break;
						case 83:
						player.move("down");
						break;
						case 68:
						player.move("right");
						break;
					}
					player.preventEscape();
				}
				document.onmousedown = function() {
					document.getElementById("gunshotSFX").play();
				}
				function Zombie(svgEquiv, x, y, r, health, stepMoves) {
					this.svgEquiv = svgEquiv;
					this.x = x;
					this.y = y;
					this.r = r;
					this.health = health;
					this.stepMoves = stepMoves;
					this.currentStepCount = 0;
					this.stepX = 0;
					this.stepY = 0;
					this.stepTimer = function() {
						void(0);
					}
					this.startPos = function() {
						this.svgEquiv.setAttribute("transform", "translate("+this.x+" "+this.y+")");
						this.svgEquiv.setAttribute("visibility", "visible");
					}
					this.detectCollisionWithPlayer = function() {
						if ((this.x - player.x) * (this.x - player.x) + (this.y - player.y) * (this.y - player.y) <= (this.r + player.r) * (this.r + player.r)) {
							// Hide Zombies
							if (normalZombie1 !== undefined) {
								normalZombie1.svgEquiv.setAttribute("visibility", "hidden");
							}
							if (normalZombie2 !== undefined) {
								normalZombie2.svgEquiv.setAttribute("visibility", "hidden");
							}
							if (normalZombie3 !== undefined) {
								normalZombie3.svgEquiv.setAttribute("visibility", "hidden");
							}
							if (normalZombie4 !== undefined) {
								normalZombie4.svgEquiv.setAttribute("visibility", "hidden");
							}
							if (hardZombie1 !== undefined) {
								hardZombie1.svgEquiv.setAttribute("visibility", "hidden");
							}
							if (hardZombie2 !== undefined) {
								hardZombie2.svgEquiv.setAttribute("visibility", "hidden");
							}
							if (hardZombie3 !== undefined) {
								hardZombie3.svgEquiv.setAttribute("visibility", "hidden");
							}
							if (hardZombie4 !== undefined) {
								hardZombie4.svgEquiv.setAttribute("visibility", "hidden");
							}
							if (bossZombie !== undefined) {
								bossZombie.svgEquiv.setAttribute("visibility", "hidden");
							}
							if (minionZombie1 !== undefined) {
								minionZombie1.svgEquiv.setAttribute("visibility", "hidden");
							}
							if (minionZombie2 !== undefined) {
								minionZombie2.svgEquiv.setAttribute("visibility", "hidden");
							}
							if (largeZombie1 !== undefined) {
								largeZombie1.svgEquiv.setAttribute("visibility", "hidden");
							}
							if (largeZombie2 !== undefined) {
								largeZombie2.svgEquiv.setAttribute("visibility", "hidden");
							}
							if (largeZombie3 !== undefined) {
								largeZombie3.svgEquiv.setAttribute("visibility", "hidden");
							}
							if (largeZombie4 !== undefined) {
								largeZombie4.svgEquiv.setAttribute("visibility", "hidden");
							}
							if (gigaZombie1 !== undefined) {
								gigaZombie1.svgEquiv.setAttribute("visibility", "hidden");
							}
							if (gigaZombie2 !== undefined) {
								gigaZombie2.svgEquiv.setAttribute("visibility", "hidden");
							}
							if (gigaZombie3 !== undefined) {
								gigaZombie3.svgEquiv.setAttribute("visibility", "hidden");
							}
							if (gigaZombie4 !== undefined) {
								gigaZombie4.svgEquiv.setAttribute("visibility", "hidden");
							}
							if (powerfulBossZombie !== undefined) {
								powerfulBossZombie.svgEquiv.setAttribute("visibility", "hidden");
							}
							if (largeMinionZombie1 !== undefined) {
								largeMinionZombie1.svgEquiv.setAttribute("visibility", "hidden");
							}
							if (largeMinionZombie2 !== undefined) {
								largeMinionZombie2.svgEquiv.setAttribute("visibility", "hidden");
							}
							if (leaderZombie1 !== undefined) {
								leaderZombie1.svgEquiv.setAttribute("visibility", "hidden");
							}
							if (leaderZombie2 !== undefined) {
								leaderZombie2.svgEquiv.setAttribute("visibility", "hidden");
							}
							if (followerZombie11 !== undefined) {
								followerZombie11.svgEquiv.setAttribute("visibility", "hidden");
							}
							if (followerZombie12 !== undefined) {
								followerZombie12.svgEquiv.setAttribute("visibility", "hidden");
							}
							if (followerZombie21 !== undefined) {
								followerZombie21.svgEquiv.setAttribute("visibility", "hidden");
							}
							if (followerZombie22 !== undefined) {
								followerZombie22.svgEquiv.setAttribute("visibility", "hidden");
							}
							if (shieldZombie1 !== undefined) {
								shieldZombie1.svgEquiv.setAttribute("visibility", "hidden");
							}
							if (shieldZombie2 !== undefined) {
								shieldZombie2.svgEquiv.setAttribute("visibility", "hidden");
							}
							if (finalBoss !== undefined) {
								finalBoss.svgEquiv.setAttribute("visibility", "hidden");
							}
							// Hide Health Bar of All Bosses
							document.getElementById("bossHealthBar").setAttribute("visibility", "hidden");
							document.getElementById("powerfulBossHealthBar").setAttribute("visibility", "hidden");
							document.getElementById("finalBossHealthBar").setAttribute("visibility", "hidden");
							// Hide Player (of course :p)
							if (player !== undefined) {
								player.svgEquiv.setAttribute("visibility", "hidden");
							}
							// Disable all onmousedown events
							if (normalZombie1 !== undefined) {
								normalZombie1.svgEquiv.setAttribute("onmousedown", "");
							}
							if (normalZombie2 !== undefined) {
								normalZombie2.svgEquiv.setAttribute("onmousedown", "");
							}
							if (normalZombie3 !== undefined) {
								normalZombie3.svgEquiv.setAttribute("onmousedown", "");
							}
							if (normalZombie4 !== undefined) {
								normalZombie4.svgEquiv.setAttribute("onmousedown", "");
							}
							if (hardZombie1 !== undefined) {
								hardZombie1.svgEquiv.setAttribute("onmousedown", "");
							}
							if (hardZombie2 !== undefined) {
								hardZombie2.svgEquiv.setAttribute("onmousedown", "");
							}
							if (hardZombie3 !== undefined) {
								hardZombie3.svgEquiv.setAttribute("onmousedown", "");
							}
							if (hardZombie4 !== undefined) {
								hardZombie4.svgEquiv.setAttribute("onmousedown", "");
							}
							if (bossZombie !== undefined) {
								bossZombie.svgEquiv.setAttribute("onmousedown", "");
							}
							if (minionZombie1 !== undefined) {
								minionZombie1.svgEquiv.setAttribute("onmousedown", "");
							}
							if (minionZombie2 !== undefined) {
								minionZombie2.svgEquiv.setAttribute("onmousedown", "");
							}
							if (largeZombie1 !== undefined) {
								largeZombie1.svgEquiv.setAttribute("onmousedown", "");
							}
							if (largeZombie2 !== undefined) {
								largeZombie2.svgEquiv.setAttribute("onmousedown", "");
							}
							if (largeZombie3 !== undefined) {
								largeZombie3.svgEquiv.setAttribute("onmousedown", "");
							}
							if (largeZombie4 !== undefined) {
								largeZombie4.svgEquiv.setAttribute("onmousedown", "");
							}
							if (gigaZombie1 !== undefined) {
								gigaZombie1.svgEquiv.setAttribute("onmousedown", "");
							}
							if (gigaZombie2 !== undefined) {
								gigaZombie2.svgEquiv.setAttribute("onmousedown", "");
							}
							if (gigaZombie3 !== undefined) {
								gigaZombie3.svgEquiv.setAttribute("onmousedown", "");
							}
							if (gigaZombie4 !== undefined) {
								gigaZombie4.svgEquiv.setAttribute("onmousedown", "");
							}
							if (powerfulBossZombie !== undefined) {
								powerfulBossZombie.svgEquiv.setAttribute("onmousedown", "");
							}
							if (largeMinionZombie1 !== undefined) {
								largeMinionZombie1.svgEquiv.setAttribute("onmousedown", "");
							}
							if (largeMinionZombie2 !== undefined) {
								largeMinionZombie2.svgEquiv.setAttribute("onmousedown", "");
							}
							if (leaderZombie1 !== undefined) {
								leaderZombie1.svgEquiv.setAttribute("onmousedown", "");
							}
							if (leaderZombie2 !== undefined) {
								leaderZombie2.svgEquiv.setAttribute("onmousedown", "");
							}
							if (followerZombie11 !== undefined) {
								followerZombie11.svgEquiv.setAttribute("onmousedown", "");
							}
							if (followerZombie12 !== undefined) {
								followerZombie12.svgEquiv.setAttribute("onmousedown", "");
							}
							if (followerZombie21 !== undefined) {
								followerZombie21.svgEquiv.setAttribute("onmousedown", "");
							}
							if (followerZombie22 !== undefined) {
								followerZombie22.svgEquiv.setAttribute("onmousedown", "");
							}
							if (shieldZombie1 !== undefined) {
								shieldZombie1.svgEquiv.setAttribute("onmousedown", "");
							}
							if (shieldZombie2 !== undefined) {
								shieldZombie2.svgEquiv.setAttribute("onmousedown", "");
							}
							if (finalBoss !== undefined) {
								finalBoss.svgEquiv.setAttribute("onmousedown", "");
							}
							// Disable Keyboard Controls
							document.onkeydown = function(event) {
								void(0);
							}
							// Clear all intervals
							if (normalZombie1 !== undefined) {
								clearInterval(normalZombie1.stepTimer);
							}
							if (normalZombie2 !== undefined) {
								clearInterval(normalZombie2.stepTimer);
							}
							if (normalZombie3 !== undefined) {
								clearInterval(normalZombie3.stepTimer);
							}
							if (normalZombie4 !== undefined) {
								clearInterval(normalZombie4.stepTimer);
							}
							if (hardZombie1 !== undefined) {
								clearInterval(hardZombie1.stepTimer);
							}
							if (hardZombie2 !== undefined) {
								clearInterval(hardZombie2.stepTimer);
							}
							if (hardZombie3 !== undefined) {
								clearInterval(hardZombie3.stepTimer);
							}
							if (hardZombie4 !== undefined) {
								clearInterval(hardZombie4.stepTimer);
							}
							if (bossZombie !== undefined) {
								clearInterval(bossZombie.stepTimer);
							}
							if (minionZombie1 !== undefined) {
								clearInterval(minionZombie1.stepTimer);
							}
							if (minionZombie2 !== undefined) {
								clearInterval(minionZombie2.stepTimer);
							}
							if (largeZombie1 !== undefined) {
								clearInterval(largeZombie1.stepTimer);
							}
							if (largeZombie2 !== undefined) {
								clearInterval(largeZombie2.stepTimer);
							}
							if (largeZombie3 !== undefined) {
								clearInterval(largeZombie3.stepTimer);
							}
							if (largeZombie4 !== undefined) {
								clearInterval(largeZombie4.stepTimer);
							}
							if (gigaZombie1 !== undefined) {
								clearInterval(gigaZombie1.stepTimer);
							}
							if (gigaZombie2 !== undefined) {
								clearInterval(gigaZombie2.stepTimer);
							}
							if (gigaZombie3 !== undefined) {
								clearInterval(gigaZombie3.stepTimer);
							}
							if (gigaZombie4 !== undefined) {
								clearInterval(gigaZombie4.stepTimer);
							}
							if (powerfulBossZombie !== undefined) {
								clearInterval(powerfulBossZombie.stepTimer);
							}
							if (largeMinionZombie1 !== undefined) {
								clearInterval(largeMinionZombie1.stepTimer);
							}
							if (largeMinionZombie2 !== undefined) {
								clearInterval(largeMinionZombie2.stepTimer);
							}
							if (leaderZombie1 !== undefined) {
								clearInterval(leaderZombie1.stepTimer);
							}
							if (leaderZombie2 !== undefined) {
								clearInterval(leaderZombie2.stepTimer);
							}
							if (followerZombie11 !== undefined) {
								clearInterval(followerZombie11.stepTimer);
							}
							if (followerZombie12 !== undefined) {
								clearInterval(followerZombie12.stepTimer);
							}
							if (followerZombie21 !== undefined) {
								clearInterval(followerZombie21.stepTimer);
							}
							if (followerZombie22 !== undefined) {
								clearInterval(followerZombie22.stepTimer);
							}
							if (shieldZombie1 !== undefined) {
								clearInterval(shieldZombie1.stepTimer);
								clearInterval(shieldZombie1.shieldTimer);
							}
							if (shieldZombie2 !== undefined) {
								clearInterval(shieldZombie2.stepTimer);
								clearInterval(shieldZombie2.shieldTimer);
							}
							if (finalBoss !== undefined) {
								clearInterval(finalBoss.stepTimer);
								clearInterval(finalBoss.shieldTimer);
							}
							// Undefine Everything
							normalZombie1 = undefined;
							normalZombie2 = undefined;
							normalZombie3 = undefined;
							normalZombie4 = undefined;
							hardZombie1 = undefined;
							hardZombie2 = undefined;
							hardZombie3 = undefined;
							hardZombie4 = undefined;
							bossZombie = undefined;
							minionZombie1 = undefined;
							minionZombie2 = undefined;
							largeZombie1 = undefined;
							largeZombie2 = undefined;
							largeZombie3 = undefined;
							largeZombie4 = undefined;
							gigaZombie1 = undefined;
							gigaZombie2 = undefined;
							gigaZombie3 = undefined;
							gigaZombie4 = undefined;
							powerfulBossZombie = undefined;
							largeMinionZombie1 = undefined;
							largeMinionZombie2 = undefined;
							leaderZombie1 = undefined;
							leaderZombie2 = undefined;
							followerZombie11 = undefined;
							followerZombie12 = undefined;
							followerZombie21 = undefined;
							followerZombie22 = undefined;
							shieldZombie1 = undefined;
							shieldZombie2 = undefined;
							finalBoss = undefined;
							player = undefined;
							// Hide Game Screen and show Game Over Screen
							document.getElementById("gameScene").setAttribute("visibility", "hidden");
							document.getElementById("gameOver").setAttribute("visibility", "visible");
							// Player loses
							document.getElementById("gameOverText").setAttribute("visibility", "visible");
							// Enable Restart Button
							document.getElementById("gameOverRestart").setAttribute("onmousedown", "location.reload()");
							// Play agonising scream :p
							document.getElementById("playerScream").play();
						}
					}
				}

				normalZombie1 = new Zombie(document.getElementById("normalZombie1"), 0, 400, 50, 1, 300);
				normalZombie1.startPos();
				normalZombie1.targetPlayer = function() {
					normalZombie1.stepX = (player.x - normalZombie1.x) / normalZombie1.stepMoves;
					normalZombie1.stepY = (player.y - normalZombie1.y) / normalZombie1.stepMoves;
					normalZombie1.currentStepCount = 0;
					normalZombie1.stepTimer = setTimeout(function() {
						normalZombie1.move();
					}, 10);
				}
				normalZombie1.move = function() {
					normalZombie1.x += normalZombie1.stepX;
					normalZombie1.y += normalZombie1.stepY;
					normalZombie1.svgEquiv.setAttribute("transform", "translate("+normalZombie1.x+" "+normalZombie1.y+")");
					normalZombie1.currentStepCount ++;
					if (normalZombie1.currentStepCount < normalZombie1.stepMoves) {
						normalZombie1.stepTimer = setTimeout(function() {
							normalZombie1.move();
						}, 10);
					} else {
						normalZombie1.stepTimer = setTimeout(function() {
							normalZombie1.targetPlayer();
						}, 10);
					}
					normalZombie1.detectCollisionWithPlayer();
				}
				normalZombie1.loseHealth = function() {
					normalZombie1.health --;
					document.getElementById("gunshotSFX").play();
					if (normalZombie1.health <= 0) {
						// Zombie dies.  Disable Zombie
						normalZombie1.svgEquiv.setAttribute("visibility", "hidden");
						normalZombie1.svgEquiv.setAttribute("onmousedown", "");
						clearInterval(normalZombie1.stepTimer);
						normalZombie1 = undefined;
						normalZombiesLeft --;
						checkNormalZombiesNum();
					}
				}

				normalZombie2 = new Zombie(document.getElementById("normalZombie2"), 500, 0, 50, 1, 300);
				normalZombie2.startPos();
				normalZombie2.targetPlayer = function() {
					normalZombie2.stepX = (player.x - normalZombie2.x) / normalZombie2.stepMoves;
					normalZombie2.stepY = (player.y - normalZombie2.y) / normalZombie2.stepMoves;
					normalZombie2.currentStepCount = 0;
					normalZombie2.stepTimer = setTimeout(function() {
						normalZombie2.move();
					}, 10);
				}
				normalZombie2.move = function() {
					normalZombie2.x += normalZombie2.stepX;
					normalZombie2.y += normalZombie2.stepY;
					normalZombie2.svgEquiv.setAttribute("transform", "translate("+normalZombie2.x+" "+normalZombie2.y+")");
					normalZombie2.currentStepCount ++;
					if (normalZombie2.currentStepCount < normalZombie2.stepMoves) {
						normalZombie2.stepTimer = setTimeout(function() {
							normalZombie2.move();
						}, 10);
					} else {
						normalZombie2.stepTimer = setTimeout(function() {
							normalZombie2.targetPlayer();
						}, 10);
					}
					normalZombie2.detectCollisionWithPlayer();
				}
				normalZombie2.loseHealth = function() {
					normalZombie2.health --;
					document.getElementById("gunshotSFX").play();
					if (normalZombie2.health <= 0) {
						// Zombie dies.  Disable Zombie
						normalZombie2.svgEquiv.setAttribute("visibility", "hidden");
						normalZombie2.svgEquiv.setAttribute("onmousedown", "");
						clearInterval(normalZombie2.stepTimer);
						normalZombie2 = undefined;
						normalZombiesLeft --;
						checkNormalZombiesNum();
					}
				}

				normalZombie3 = new Zombie(document.getElementById("normalZombie3"), 1000, 400, 50, 1, 300);
				normalZombie3.startPos();
				normalZombie3.targetPlayer = function() {
					normalZombie3.stepX = (player.x - normalZombie3.x) / normalZombie3.stepMoves;
					normalZombie3.stepY = (player.y - normalZombie3.y) / normalZombie3.stepMoves;
					normalZombie3.currentStepCount = 0;
					normalZombie3.stepTimer = setTimeout(function() {
						normalZombie3.move();
					}, 10);
				}
				normalZombie3.move = function() {
					normalZombie3.x += normalZombie3.stepX;
					normalZombie3.y += normalZombie3.stepY;
					normalZombie3.svgEquiv.setAttribute("transform", "translate("+normalZombie3.x+" "+normalZombie3.y+")");
					normalZombie3.currentStepCount ++;
					if (normalZombie3.currentStepCount < normalZombie3.stepMoves) {
						normalZombie3.stepTimer = setTimeout(function() {
							normalZombie3.move();
						}, 10);
					} else {
						normalZombie3.stepTimer = setTimeout(function() {
							normalZombie3.targetPlayer();
						}, 10);
					}
					normalZombie3.detectCollisionWithPlayer();
				}
				normalZombie3.loseHealth = function() {
					normalZombie3.health --;
					document.getElementById("gunshotSFX").play();
					if (normalZombie3.health <= 0) {
						// Zombie dies.  Disable Zombie
						normalZombie3.svgEquiv.setAttribute("visibility", "hidden");
						normalZombie3.svgEquiv.setAttribute("onmousedown", "");
						clearInterval(normalZombie3.stepTimer);
						normalZombie3 = undefined;
						normalZombiesLeft --;
						checkNormalZombiesNum();
					}
				}

				normalZombie4 = new Zombie(document.getElementById("normalZombie4"), 500, 800, 50, 1, 300);
				normalZombie4.startPos();
				normalZombie4.targetPlayer = function() {
					normalZombie4.stepX = (player.x - normalZombie4.x) / normalZombie4.stepMoves;
					normalZombie4.stepY = (player.y - normalZombie4.y) / normalZombie4.stepMoves;
					normalZombie4.currentStepCount = 0;
					normalZombie4.stepTimer = setTimeout(function() {
						normalZombie4.move();
					}, 10);
				}
				normalZombie4.move = function() {
					normalZombie4.x += normalZombie4.stepX;
					normalZombie4.y += normalZombie4.stepY;
					normalZombie4.svgEquiv.setAttribute("transform", "translate("+normalZombie4.x+" "+normalZombie4.y+")");
					normalZombie4.currentStepCount ++;
					if (normalZombie4.currentStepCount < normalZombie4.stepMoves) {
						normalZombie4.stepTimer = setTimeout(function() {
							normalZombie4.move();
						}, 10);
					} else {
						normalZombie4.stepTimer = setTimeout(function() {
							normalZombie4.targetPlayer();
						}, 10);
					}
					normalZombie4.detectCollisionWithPlayer();
				}
				normalZombie4.loseHealth = function() {
					normalZombie4.health --;
					document.getElementById("gunshotSFX").play();
					if (normalZombie4.health <= 0) {
						// Zombie dies.  Disable Zombie
						normalZombie4.svgEquiv.setAttribute("visibility", "hidden");
						normalZombie4.svgEquiv.setAttribute("onmousedown", "");
						clearInterval(normalZombie4.stepTimer);
						normalZombie4 = undefined;
						normalZombiesLeft --;
						checkNormalZombiesNum();
					}
				}

				function checkNormalZombiesNum() {
					if (normalZombiesLeft <= 0) {
						releaseHardZombies();
					}
				}
				function releaseHardZombies() {
					hardZombie1 = new Zombie(document.getElementById("hardZombie1"), 0, 0, 50, 3, 250);
					hardZombie1.startPos();
					hardZombie1.targetPlayer = function() {
						hardZombie1.stepX = (player.x - hardZombie1.x) / hardZombie1.stepMoves;
						hardZombie1.stepY = (player.y - hardZombie1.y) / hardZombie1.stepMoves;
						hardZombie1.currentStepCount = 0;
						hardZombie1.stepTimer = setTimeout(function() {
							hardZombie1.move();
						}, 10);
					}
					hardZombie1.move = function() {
						hardZombie1.x += hardZombie1.stepX;
						hardZombie1.y += hardZombie1.stepY;
						hardZombie1.svgEquiv.setAttribute("transform", "translate("+hardZombie1.x+" "+hardZombie1.y+")");
						hardZombie1.currentStepCount ++;
						if (hardZombie1.currentStepCount < hardZombie1.stepMoves) {
							hardZombie1.stepTimer = setTimeout(function() {
								hardZombie1.move();
							}, 10);
						} else {
							hardZombie1.stepTimer = setTimeout(function() {
								hardZombie1.targetPlayer();
							}, 10);
						}
						hardZombie1.detectCollisionWithPlayer();
					}
					hardZombie1.loseHealth = function() {
						hardZombie1.health --;
						document.getElementById("gunshotSFX").play();
						if (hardZombie1.health <= 0) {
							// Zombie dies.  Disable Zombie
							hardZombie1.svgEquiv.setAttribute("visibility", "hidden");
							hardZombie1.svgEquiv.setAttribute("onmousedown", "");
							clearInterval(hardZombie1.stepTimer);
							hardZombie1 = undefined;
							hardZombiesLeft --;
							checkHardZombiesNum();
						}
					}

					hardZombie2 = new Zombie(document.getElementById("hardZombie2"), 1000, 0, 50, 3, 250);
					hardZombie2.startPos();
					hardZombie2.targetPlayer = function() {
						hardZombie2.stepX = (player.x - hardZombie2.x) / hardZombie2.stepMoves;
						hardZombie2.stepY = (player.y - hardZombie2.y) / hardZombie2.stepMoves;
						hardZombie2.currentStepCount = 0;
						hardZombie2.stepTimer = setTimeout(function() {
							hardZombie2.move();
						}, 10);
					}
					hardZombie2.move = function() {
						hardZombie2.x += hardZombie2.stepX;
						hardZombie2.y += hardZombie2.stepY;
						hardZombie2.svgEquiv.setAttribute("transform", "translate("+hardZombie2.x+" "+hardZombie2.y+")");
						hardZombie2.currentStepCount ++;
						if (hardZombie2.currentStepCount < hardZombie2.stepMoves) {
							hardZombie2.stepTimer = setTimeout(function() {
								hardZombie2.move();
							}, 10);
						} else {
							hardZombie2.stepTimer = setTimeout(function() {
								hardZombie2.targetPlayer();
							}, 10);
						}
						hardZombie2.detectCollisionWithPlayer();
					}
					hardZombie2.loseHealth = function() {
						hardZombie2.health --;
						document.getElementById("gunshotSFX").play();
						if (hardZombie2.health <= 0) {
							// Zombie dies.  Disable Zombie
							hardZombie2.svgEquiv.setAttribute("visibility", "hidden");
							hardZombie2.svgEquiv.setAttribute("onmousedown", "");
							clearInterval(hardZombie2.stepTimer);
							hardZombie2 = undefined;
							hardZombiesLeft --;
							checkHardZombiesNum();
						}
					}

					hardZombie3 = new Zombie(document.getElementById("hardZombie3"), 0, 800, 50, 3, 250);
					hardZombie3.startPos();
					hardZombie3.targetPlayer = function() {
						hardZombie3.stepX = (player.x - hardZombie3.x) / hardZombie3.stepMoves;
						hardZombie3.stepY = (player.y - hardZombie3.y) / hardZombie3.stepMoves;
						hardZombie3.currentStepCount = 0;
						hardZombie3.stepTimer = setTimeout(function() {
							hardZombie3.move();
						}, 10);
					}
					hardZombie3.move = function() {
						hardZombie3.x += hardZombie3.stepX;
						hardZombie3.y += hardZombie3.stepY;
						hardZombie3.svgEquiv.setAttribute("transform", "translate("+hardZombie3.x+" "+hardZombie3.y+")");
						hardZombie3.currentStepCount ++;
						if (hardZombie3.currentStepCount < hardZombie3.stepMoves) {
							hardZombie3.stepTimer = setTimeout(function() {
								hardZombie3.move();
							}, 10);
						} else {
							hardZombie3.stepTimer = setTimeout(function() {
								hardZombie3.targetPlayer();
							}, 10);
						}
						hardZombie3.detectCollisionWithPlayer();
					}
					hardZombie3.loseHealth = function() {
						hardZombie3.health --;
						document.getElementById("gunshotSFX").play();
						if (hardZombie3.health <= 0) {
							// Zombie dies.  Disable Zombie
							hardZombie3.svgEquiv.setAttribute("visibility", "hidden");
							hardZombie3.svgEquiv.setAttribute("onmousedown", "");
							clearInterval(hardZombie3.stepTimer);
							hardZombie3 = undefined;
							hardZombiesLeft --;
							checkHardZombiesNum();
						}
					}

					hardZombie4 = new Zombie(document.getElementById("hardZombie4"), 1000, 800, 50, 3, 250);
					hardZombie4.startPos();
					hardZombie4.targetPlayer = function() {
						hardZombie4.stepX = (player.x - hardZombie4.x) / hardZombie4.stepMoves;
						hardZombie4.stepY = (player.y - hardZombie4.y) / hardZombie4.stepMoves;
						hardZombie4.currentStepCount = 0;
						hardZombie4.stepTimer = setTimeout(function() {
							hardZombie4.move();
						}, 10);
					}
					hardZombie4.move = function() {
						hardZombie4.x += hardZombie4.stepX;
						hardZombie4.y += hardZombie4.stepY;
						hardZombie4.svgEquiv.setAttribute("transform", "translate("+hardZombie4.x+" "+hardZombie4.y+")");
						hardZombie4.currentStepCount ++;
						if (hardZombie4.currentStepCount < hardZombie4.stepMoves) {
							hardZombie4.stepTimer = setTimeout(function() {
								hardZombie4.move();
							}, 10);
						} else {
							hardZombie4.stepTimer = setTimeout(function() {
								hardZombie4.targetPlayer();
							}, 10);
						}
						hardZombie4.detectCollisionWithPlayer();
					}
					hardZombie4.loseHealth = function() {
						hardZombie4.health --;
						document.getElementById("gunshotSFX").play();
						if (hardZombie4.health <= 0) {
							// Zombie dies.  Disable Zombie
							hardZombie4.svgEquiv.setAttribute("visibility", "hidden");
							hardZombie4.svgEquiv.setAttribute("onmousedown", "");
							clearInterval(hardZombie4.stepTimer);
							hardZombie4 = undefined;
							hardZombiesLeft --;
							checkHardZombiesNum();
						}
					}

					function checkHardZombiesNum() {
						if (hardZombiesLeft <= 0) {
							releaseBoss();
						}
					}
					function releaseBoss() {
						bossZombie = new Zombie(document.getElementById("bossZombie"), 500, -200, 200, 60, 500);
						bossZombie.startPos();
						bossZombie.targetPlayer = function() {
							bossZombie.stepX = (player.x - bossZombie.x) / bossZombie.stepMoves;
							bossZombie.stepY = (player.y - bossZombie.y) / bossZombie.stepMoves;
							bossZombie.currentStepCount = 0;
							bossZombie.stepTimer = setTimeout(function() {
								bossZombie.move();
							}, 10);
						}
						bossZombie.move = function() {
							bossZombie.x += bossZombie.stepX;
							bossZombie.y += bossZombie.stepY;
							bossZombie.svgEquiv.setAttribute("transform", "translate("+bossZombie.x+" "+bossZombie.y+")");
							bossZombie.currentStepCount ++;
							if (bossZombie.currentStepCount < bossZombie.stepMoves) {
								bossZombie.stepTimer = setTimeout(function() {
									bossZombie.move();
								}, 10);
							} else {
								bossZombie.stepTimer = setTimeout(function() {
									bossZombie.targetPlayer();
								}, 10);
							}
							bossZombie.detectCollisionWithPlayer();
						}
						bossZombie.loseHealth = function() {
							bossZombie.health --;
							document.getElementById("gunshotSFX").play();
							document.getElementById("actualBossHealth").setAttribute("width", 10 * bossZombie.health);
							if (bossZombie.health <= 0) {
								// Zombie dies.  Disable Zombie
								bossZombie.svgEquiv.setAttribute("visibility", "hidden");
								bossZombie.svgEquiv.setAttribute("onmousedown", "");
								clearInterval(bossZombie.stepTimer);
								bossZombie = undefined;
								// Hide its Health Bar
								document.getElementById("bossHealthBar").setAttribute("visibility", "hidden");
								// Disable Minions
								minionZombie1.svgEquiv.setAttribute("visibility", "hidden");
								minionZombie1.svgEquiv.setAttribute("onmousedown", "");
								clearInterval(minionZombie1.stepTimer);
								minionZombie1 = undefined;
								minionZombie2.svgEquiv.setAttribute("visibility", "hidden");
								minionZombie2.svgEquiv.setAttribute("onmousedown", "");
								clearInterval(minionZombie2.stepTimer);
								minionZombie2 = undefined;
								releaseLargeZombies();
							}
						}

						function releaseLargeZombies() {
							largeZombie1 = new Zombie(document.getElementById("largeZombie1"), -75, 400, 75, 5, 300);
							largeZombie1.startPos();
							largeZombie1.targetPlayer = function() {
								largeZombie1.stepX = (player.x - largeZombie1.x) / largeZombie1.stepMoves;
								largeZombie1.stepY = (player.y - largeZombie1.y) / largeZombie1.stepMoves;
								largeZombie1.currentStepCount = 0;
								largeZombie1.stepTimer = setTimeout(function() {
									largeZombie1.move();
								}, 10);
							}
							largeZombie1.move = function() {
								largeZombie1.x += largeZombie1.stepX;
								largeZombie1.y += largeZombie1.stepY;
								largeZombie1.svgEquiv.setAttribute("transform", "translate("+largeZombie1.x+" "+largeZombie1.y+")");
								largeZombie1.currentStepCount ++;
								if (largeZombie1.currentStepCount < largeZombie1.stepMoves) {
									largeZombie1.stepTimer = setTimeout(function() {
										largeZombie1.move();
									}, 10);
								} else {
									largeZombie1.stepTimer = setTimeout(function() {
										largeZombie1.targetPlayer();
									}, 10);
								}
								largeZombie1.detectCollisionWithPlayer();
							}
							largeZombie1.loseHealth = function() {
								largeZombie1.health --;
								document.getElementById("gunshotSFX").play();
								if (largeZombie1.health <= 0) {
									// Zombie dies.  Disable Zombie
									largeZombie1.svgEquiv.setAttribute("visibility", "hidden");
									largeZombie1.svgEquiv.setAttribute("onmousedown", "");
									clearInterval(largeZombie1.stepTimer);
									largeZombie1 = undefined;
									largeZombiesLeft --;
									checkLargeZombiesNum();
								}
							}

							largeZombie2 = new Zombie(document.getElementById("largeZombie2"), 500, -75, 75, 5, 300);
							largeZombie2.startPos();
							largeZombie2.targetPlayer = function() {
								largeZombie2.stepX = (player.x - largeZombie2.x) / largeZombie2.stepMoves;
								largeZombie2.stepY = (player.y - largeZombie2.y) / largeZombie2.stepMoves;
								largeZombie2.currentStepCount = 0;
								largeZombie2.stepTimer = setTimeout(function() {
									largeZombie2.move();
								}, 10);
							}
							largeZombie2.move = function() {
								largeZombie2.x += largeZombie2.stepX;
								largeZombie2.y += largeZombie2.stepY;
								largeZombie2.svgEquiv.setAttribute("transform", "translate("+largeZombie2.x+" "+largeZombie2.y+")");
								largeZombie2.currentStepCount ++;
								if (largeZombie2.currentStepCount < largeZombie2.stepMoves) {
									largeZombie2.stepTimer = setTimeout(function() {
										largeZombie2.move();
									}, 10);
								} else {
									largeZombie2.stepTimer = setTimeout(function() {
										largeZombie2.targetPlayer();
									}, 10);
								}
								largeZombie2.detectCollisionWithPlayer();
							}
							largeZombie2.loseHealth = function() {
								largeZombie2.health --;
								document.getElementById("gunshotSFX").play();
								if (largeZombie2.health <= 0) {
									// Zombie dies.  Disable Zombie
									largeZombie2.svgEquiv.setAttribute("visibility", "hidden");
									largeZombie2.svgEquiv.setAttribute("onmousedown", "");
									clearInterval(largeZombie2.stepTimer);
									largeZombie2 = undefined;
									largeZombiesLeft --;
									checkLargeZombiesNum();
								}
							}

							largeZombie3 = new Zombie(document.getElementById("largeZombie3"), 1075, 400, 75, 5, 300);
							largeZombie3.startPos();
							largeZombie3.targetPlayer = function() {
								largeZombie3.stepX = (player.x - largeZombie3.x) / largeZombie3.stepMoves;
								largeZombie3.stepY = (player.y - largeZombie3.y) / largeZombie3.stepMoves;
								largeZombie3.currentStepCount = 0;
								largeZombie3.stepTimer = setTimeout(function() {
									largeZombie3.move();
								}, 10);
							}
							largeZombie3.move = function() {
								largeZombie3.x += largeZombie3.stepX;
								largeZombie3.y += largeZombie3.stepY;
								largeZombie3.svgEquiv.setAttribute("transform", "translate("+largeZombie3.x+" "+largeZombie3.y+")");
								largeZombie3.currentStepCount ++;
								if (largeZombie3.currentStepCount < largeZombie3.stepMoves) {
									largeZombie3.stepTimer = setTimeout(function() {
										largeZombie3.move();
									}, 10);
								} else {
									largeZombie3.stepTimer = setTimeout(function() {
										largeZombie3.targetPlayer();
									}, 10);
								}
								largeZombie3.detectCollisionWithPlayer();
							}
							largeZombie3.loseHealth = function() {
								largeZombie3.health --;
								document.getElementById("gunshotSFX").play();
								if (largeZombie3.health <= 0) {
									// Zombie dies.  Disable Zombie
									largeZombie3.svgEquiv.setAttribute("visibility", "hidden");
									largeZombie3.svgEquiv.setAttribute("onmousedown", "");
									clearInterval(largeZombie3.stepTimer);
									largeZombie3 = undefined;
									largeZombiesLeft --;
									checkLargeZombiesNum();
								}
							}

							largeZombie4 = new Zombie(document.getElementById("largeZombie4"), 500, 875, 75, 5, 300);
							largeZombie4.startPos();
							largeZombie4.targetPlayer = function() {
								largeZombie4.stepX = (player.x - largeZombie4.x) / largeZombie4.stepMoves;
								largeZombie4.stepY = (player.y - largeZombie4.y) / largeZombie4.stepMoves;
								largeZombie4.currentStepCount = 0;
								largeZombie4.stepTimer = setTimeout(function() {
									largeZombie4.move();
								}, 10);
							}
							largeZombie4.move = function() {
								largeZombie4.x += largeZombie4.stepX;
								largeZombie4.y += largeZombie4.stepY;
								largeZombie4.svgEquiv.setAttribute("transform", "translate("+largeZombie4.x+" "+largeZombie4.y+")");
								largeZombie4.currentStepCount ++;
								if (largeZombie4.currentStepCount < largeZombie4.stepMoves) {
									largeZombie4.stepTimer = setTimeout(function() {
										largeZombie4.move();
									}, 10);
								} else {
									largeZombie4.stepTimer = setTimeout(function() {
										largeZombie4.targetPlayer();
									}, 10);
								}
								largeZombie4.detectCollisionWithPlayer();
							}
							largeZombie4.loseHealth = function() {
								largeZombie4.health --;
								document.getElementById("gunshotSFX").play();
								if (largeZombie4.health <= 0) {
									// Zombie dies.  Disable Zombie
									largeZombie4.svgEquiv.setAttribute("visibility", "hidden");
									largeZombie4.svgEquiv.setAttribute("onmousedown", "");
									clearInterval(largeZombie4.stepTimer);
									largeZombie4 = undefined;
									largeZombiesLeft --;
									checkLargeZombiesNum();
								}
							}

							function checkLargeZombiesNum() {
								if (largeZombiesLeft <= 0) {
									releaseGigaZombies();
								}
							}
							function releaseGigaZombies() {
								gigaZombie1 = new Zombie(document.getElementById("gigaZombie1"), -100, -100, 100, 10, 350);
								gigaZombie1.startPos();
								gigaZombie1.targetPlayer = function() {
									gigaZombie1.stepX = (player.x - gigaZombie1.x) / gigaZombie1.stepMoves;
									gigaZombie1.stepY = (player.y - gigaZombie1.y) / gigaZombie1.stepMoves;
									gigaZombie1.currentStepCount = 0;
									gigaZombie1.stepTimer = setTimeout(function() {
										gigaZombie1.move();
									}, 10);
								}
								gigaZombie1.move = function() {
									gigaZombie1.x += gigaZombie1.stepX;
									gigaZombie1.y += gigaZombie1.stepY;
									gigaZombie1.svgEquiv.setAttribute("transform", "translate("+gigaZombie1.x+" "+gigaZombie1.y+")");
									gigaZombie1.currentStepCount ++;
									if (gigaZombie1.currentStepCount < gigaZombie1.stepMoves) {
										gigaZombie1.stepTimer = setTimeout(function() {
											gigaZombie1.move();
										}, 10);
									} else {
										gigaZombie1.stepTimer = setTimeout(function() {
											gigaZombie1.targetPlayer();
										}, 10);
									}
									gigaZombie1.detectCollisionWithPlayer();
								}
								gigaZombie1.loseHealth = function() {
									gigaZombie1.health --;
									document.getElementById("gunshotSFX").play();
									if (gigaZombie1.health <= 0) {
										// Zombie dies.  Disable Zombie
										gigaZombie1.svgEquiv.setAttribute("visibility", "hidden");
										gigaZombie1.svgEquiv.setAttribute("onmousedown", "");
										clearInterval(gigaZombie1.stepTimer);
										gigaZombie1 = undefined;
										gigaZombiesLeft --;
										checkGigaZombiesNum();
									}
								}

								gigaZombie2 = new Zombie(document.getElementById("gigaZombie2"), 1100, -100, 100, 10, 350);
								gigaZombie2.startPos();
								gigaZombie2.targetPlayer = function() {
									gigaZombie2.stepX = (player.x - gigaZombie2.x) / gigaZombie2.stepMoves;
									gigaZombie2.stepY = (player.y - gigaZombie2.y) / gigaZombie2.stepMoves;
									gigaZombie2.currentStepCount = 0;
									gigaZombie2.stepTimer = setTimeout(function() {
										gigaZombie2.move();
									}, 10);
								}
								gigaZombie2.move = function() {
									gigaZombie2.x += gigaZombie2.stepX;
									gigaZombie2.y += gigaZombie2.stepY;
									gigaZombie2.svgEquiv.setAttribute("transform", "translate("+gigaZombie2.x+" "+gigaZombie2.y+")");
									gigaZombie2.currentStepCount ++;
									if (gigaZombie2.currentStepCount < gigaZombie2.stepMoves) {
										gigaZombie2.stepTimer = setTimeout(function() {
											gigaZombie2.move();
										}, 10);
									} else {
										gigaZombie2.stepTimer = setTimeout(function() {
											gigaZombie2.targetPlayer();
										}, 10);
									}
									gigaZombie2.detectCollisionWithPlayer();
								}
								gigaZombie2.loseHealth = function() {
									gigaZombie2.health --;
									document.getElementById("gunshotSFX").play();
									if (gigaZombie2.health <= 0) {
										// Zombie dies.  Disable Zombie
										gigaZombie2.svgEquiv.setAttribute("visibility", "hidden");
										gigaZombie2.svgEquiv.setAttribute("onmousedown", "");
										clearInterval(gigaZombie2.stepTimer);
										gigaZombie2 = undefined;
										gigaZombiesLeft --;
										checkGigaZombiesNum();
									}
								}

								gigaZombie3 = new Zombie(document.getElementById("gigaZombie3"), -100, 900, 100, 10, 350);
								gigaZombie3.startPos();
								gigaZombie3.targetPlayer = function() {
									gigaZombie3.stepX = (player.x - gigaZombie3.x) / gigaZombie3.stepMoves;
									gigaZombie3.stepY = (player.y - gigaZombie3.y) / gigaZombie3.stepMoves;
									gigaZombie3.currentStepCount = 0;
									gigaZombie3.stepTimer = setTimeout(function() {
										gigaZombie3.move();
									}, 10);
								}
								gigaZombie3.move = function() {
									gigaZombie3.x += gigaZombie3.stepX;
									gigaZombie3.y += gigaZombie3.stepY;
									gigaZombie3.svgEquiv.setAttribute("transform", "translate("+gigaZombie3.x+" "+gigaZombie3.y+")");
									gigaZombie3.currentStepCount ++;
									if (gigaZombie3.currentStepCount < gigaZombie3.stepMoves) {
										gigaZombie3.stepTimer = setTimeout(function() {
											gigaZombie3.move();
										}, 10);
									} else {
										gigaZombie3.stepTimer = setTimeout(function() {
											gigaZombie3.targetPlayer();
										}, 10);
									}
									gigaZombie3.detectCollisionWithPlayer();
								}
								gigaZombie3.loseHealth = function() {
									gigaZombie3.health --;
									document.getElementById("gunshotSFX").play();
									if (gigaZombie3.health <= 0) {
										// Zombie dies.  Disable Zombie
										gigaZombie3.svgEquiv.setAttribute("visibility", "hidden");
										gigaZombie3.svgEquiv.setAttribute("onmousedown", "");
										clearInterval(gigaZombie3.stepTimer);
										gigaZombie3 = undefined;
										gigaZombiesLeft --;
										checkGigaZombiesNum();
									}
								}

								gigaZombie4 = new Zombie(document.getElementById("gigaZombie4"), 1100, 900, 100, 10, 350);
								gigaZombie4.startPos();
								gigaZombie4.targetPlayer = function() {
									gigaZombie4.stepX = (player.x - gigaZombie4.x) / gigaZombie4.stepMoves;
									gigaZombie4.stepY = (player.y - gigaZombie4.y) / gigaZombie4.stepMoves;
									gigaZombie4.currentStepCount = 0;
									gigaZombie4.stepTimer = setTimeout(function() {
										gigaZombie4.move();
									}, 10);
								}
								gigaZombie4.move = function() {
									gigaZombie4.x += gigaZombie4.stepX;
									gigaZombie4.y += gigaZombie4.stepY;
									gigaZombie4.svgEquiv.setAttribute("transform", "translate("+gigaZombie4.x+" "+gigaZombie4.y+")");
									gigaZombie4.currentStepCount ++;
									if (gigaZombie4.currentStepCount < gigaZombie4.stepMoves) {
										gigaZombie4.stepTimer = setTimeout(function() {
											gigaZombie4.move();
										}, 10);
									} else {
										gigaZombie4.stepTimer = setTimeout(function() {
											gigaZombie4.targetPlayer();
										}, 10);
									}
									gigaZombie4.detectCollisionWithPlayer();
								}
								gigaZombie4.loseHealth = function() {
									gigaZombie4.health --;
									document.getElementById("gunshotSFX").play();
									if (gigaZombie4.health <= 0) {
										// Zombie dies.  Disable Zombie
										gigaZombie4.svgEquiv.setAttribute("visibility", "hidden");
										gigaZombie4.svgEquiv.setAttribute("onmousedown", "");
										clearInterval(gigaZombie4.stepTimer);
										gigaZombie4 = undefined;
										gigaZombiesLeft --;
										checkGigaZombiesNum();
									}
								}

								function checkGigaZombiesNum() {
									if (gigaZombiesLeft <= 0) {
										releasePowerfulBoss();
									}
								}
								function releasePowerfulBoss() {
									powerfulBossZombie = new Zombie(document.getElementById("powerfulBossZombie"), 500, -200, 200, 150, 400);
									powerfulBossZombie.startPos();
									powerfulBossZombie.targetPlayer = function() {
										powerfulBossZombie.stepX = (player.x - powerfulBossZombie.x) / powerfulBossZombie.stepMoves;
										powerfulBossZombie.stepY = (player.y - powerfulBossZombie.y) / powerfulBossZombie.stepMoves;
										powerfulBossZombie.currentStepCount = 0;
										powerfulBossZombie.stepTimer = setTimeout(function() {
											powerfulBossZombie.move();
										}, 10);
									}
									powerfulBossZombie.move = function() {
										powerfulBossZombie.x += powerfulBossZombie.stepX;
										powerfulBossZombie.y += powerfulBossZombie.stepY;
										powerfulBossZombie.svgEquiv.setAttribute("transform", "translate("+powerfulBossZombie.x+" "+powerfulBossZombie.y+")");
										powerfulBossZombie.currentStepCount ++;
										if (powerfulBossZombie.currentStepCount < powerfulBossZombie.stepMoves) {
											powerfulBossZombie.stepTimer = setTimeout(function() {
												powerfulBossZombie.move();
											}, 10);
										} else {
											powerfulBossZombie.stepTimer = setTimeout(function() {
												powerfulBossZombie.targetPlayer();
											}, 10);
										}
										powerfulBossZombie.detectCollisionWithPlayer();
									}
									powerfulBossZombie.loseHealth = function() {
										powerfulBossZombie.health --;
										document.getElementById("gunshotSFX").play();
										document.getElementById("actualPowerfulBossHealth").setAttribute("width", 4 * powerfulBossZombie.health);
										if (powerfulBossZombie.health <= 0) {
											// Zombie dies.  Disable Zombie
											powerfulBossZombie.svgEquiv.setAttribute("visibility", "hidden");
											powerfulBossZombie.svgEquiv.setAttribute("onmousedown", "");
											clearInterval(powerfulBossZombie.stepTimer);
											powerfulBossZombie = undefined;
											// Hide its Health Bar
											document.getElementById("powerfulBossHealthBar").setAttribute("visibility", "hidden");
											// Disable Large Minions
											largeMinionZombie1.svgEquiv.setAttribute("visibility", "hidden");
											largeMinionZombie1.svgEquiv.setAttribute("onmousedown", "");
											clearInterval(largeMinionZombie1.stepTimer);
											largeMinionZombie1 = undefined;
											largeMinionZombie2.svgEquiv.setAttribute("visibility", "hidden");
											largeMinionZombie2.svgEquiv.setAttribute("onmousedown", "");
											clearInterval(largeMinionZombie2.stepTimer);
											largeMinionZombie2 = undefined;
											releaseLeaderZombies();
										}
									}

									function releaseLeaderZombies() {
										leaderZombie1 = new Zombie(document.getElementById("leaderZombie1"), 500, 0, 50, 15, 300);
										leaderZombie1.startPos();
										leaderZombie1.targetPlayer = function() {
											leaderZombie1.stepX = (player.x - leaderZombie1.x) / leaderZombie1.stepMoves;
											leaderZombie1.stepY = (player.y - leaderZombie1.y) / leaderZombie1.stepMoves;
											leaderZombie1.currentStepCount = 0;
											leaderZombie1.stepTimer = setTimeout(function() {
												leaderZombie1.move();
											}, 10);
										}
										leaderZombie1.move = function() {
											leaderZombie1.x += leaderZombie1.stepX;
											leaderZombie1.y += leaderZombie1.stepY;
											leaderZombie1.svgEquiv.setAttribute("transform", "translate("+leaderZombie1.x+" "+leaderZombie1.y+")");
											leaderZombie1.currentStepCount ++;
											if (leaderZombie1.currentStepCount < leaderZombie1.stepMoves) {
												leaderZombie1.stepTimer = setTimeout(function() {
													leaderZombie1.move();
												}, 10);
											} else {
												leaderZombie1.stepTimer = setTimeout(function() {
													leaderZombie1.targetPlayer();
												}, 10);
											}
											leaderZombie1.detectCollisionWithPlayer();
										}
										leaderZombie1.loseHealth = function() {
											leaderZombie1.health --;
											document.getElementById("gunshotSFX").play();
											if (leaderZombie1.health <= 0) {
												// Zombie dies.  Disable Zombie
												leaderZombie1.svgEquiv.setAttribute("visibility", "hidden");
												leaderZombie1.svgEquiv.setAttribute("onmousedown", "");
												clearInterval(leaderZombie1.stepTimer);
												leaderZombie1 = undefined;
												// Disable its Followers
												followerZombie11.svgEquiv.setAttribute("visibility", "hidden");
												followerZombie11.svgEquiv.setAttribute("onmousedown", "");
												clearInterval(followerZombie11.stepTimer);
												followerZombie11 = undefined;
												followerZombie12.svgEquiv.setAttribute("visibility", "hidden");
												followerZombie12.svgEquiv.setAttribute("onmousedown", "");
												clearInterval(followerZombie12.stepTimer);
												followerZombie12 = undefined;
												leaderZombiesLeft --;
												checkLeaderZombiesNum();
											}
										}

										leaderZombie2 = new Zombie(document.getElementById("leaderZombie2"), 500, 800, 50, 15, 300);
										leaderZombie2.startPos();
										leaderZombie2.targetPlayer = function() {
											leaderZombie2.stepX = (player.x - leaderZombie2.x) / leaderZombie2.stepMoves;
											leaderZombie2.stepY = (player.y - leaderZombie2.y) / leaderZombie2.stepMoves;
											leaderZombie2.currentStepCount = 0;
											leaderZombie2.stepTimer = setTimeout(function() {
												leaderZombie2.move();
											}, 10);
										}
										leaderZombie2.move = function() {
											leaderZombie2.x += leaderZombie2.stepX;
											leaderZombie2.y += leaderZombie2.stepY;
											leaderZombie2.svgEquiv.setAttribute("transform", "translate("+leaderZombie2.x+" "+leaderZombie2.y+")");
											leaderZombie2.currentStepCount ++;
											if (leaderZombie2.currentStepCount < leaderZombie2.stepMoves) {
												leaderZombie2.stepTimer = setTimeout(function() {
													leaderZombie2.move();
												}, 10);
											} else {
												leaderZombie2.stepTimer = setTimeout(function() {
													leaderZombie2.targetPlayer();
												}, 10);
											}
											leaderZombie2.detectCollisionWithPlayer();
										}
										leaderZombie2.loseHealth = function() {
											leaderZombie2.health --;
											document.getElementById("gunshotSFX").play();
											if (leaderZombie2.health <= 0) {
												// Zombie dies.  Disable Zombie
												leaderZombie2.svgEquiv.setAttribute("visibility", "hidden");
												leaderZombie2.svgEquiv.setAttribute("onmousedown", "");
												clearInterval(leaderZombie2.stepTimer);
												leaderZombie2 = undefined;
												// Disable its Followers
												followerZombie21.svgEquiv.setAttribute("visibility", "hidden");
												followerZombie21.svgEquiv.setAttribute("onmousedown", "");
												clearInterval(followerZombie21.stepTimer);
												followerZombie21 = undefined;
												followerZombie22.svgEquiv.setAttribute("visibility", "hidden");
												followerZombie22.svgEquiv.setAttribute("onmousedown", "");
												clearInterval(followerZombie22.stepTimer);
												followerZombie22 = undefined;
												leaderZombiesLeft --;
												checkLeaderZombiesNum();
											}
										}

										function checkLeaderZombiesNum() {
											if (leaderZombiesLeft <= 0) {
												releaseShieldZombies();
											}
										}
										function releaseShieldZombies() {
											shieldZombie1 = new Zombie(document.getElementById("shieldZombie1"), 0, 400, 50, 20, 175);
											shieldZombie1.startPos();
											shieldZombie1.targetPlayer = function() {
												shieldZombie1.stepX = (player.x - shieldZombie1.x) / shieldZombie1.stepMoves;
												shieldZombie1.stepY = (player.y - shieldZombie1.y) / shieldZombie1.stepMoves;
												shieldZombie1.currentStepCount = 0;
												shieldZombie1.stepTimer = setTimeout(function() {
													shieldZombie1.move();
												}, 10);
											}
											shieldZombie1.move = function() {
												shieldZombie1.x += shieldZombie1.stepX;
												shieldZombie1.y += shieldZombie1.stepY;
												shieldZombie1.svgEquiv.setAttribute("transform", "translate("+shieldZombie1.x+" "+shieldZombie1.y+")");
												shieldZombie1.currentStepCount ++;
												if (shieldZombie1.currentStepCount < shieldZombie1.stepMoves) {
													shieldZombie1.stepTimer = setTimeout(function() {
														shieldZombie1.move();
													}, 10);
												} else {
													shieldZombie1.stepTimer = setTimeout(function() {
														shieldZombie1.targetPlayer();
													}, 10);
												}
												shieldZombie1.detectCollisionWithPlayer();
											}
											shieldZombie1.loseHealth = function() {
												shieldZombie1.health --;
												document.getElementById("gunshotSFX").play();
												if (shieldZombie1.health <= 0) {
													// Zombie dies.  Disable Zombie
													shieldZombie1.svgEquiv.setAttribute("visibility", "hidden");
													shieldZombie1.svgEquiv.setAttribute("onmousedown", "");
													clearInterval(shieldZombie1.stepTimer);
													clearInterval(shieldZombie1.shieldTimer);
													shieldZombie1 = undefined;
													shieldZombiesLeft --;
													checkShieldZombiesNum();
												}
											}
											shieldZombie1.shieldTimer = function() {
												void(0);
											}
											shieldZombie1.shieldDown = function() {
												shieldZombie1.svgEquiv.setAttribute("opacity", "1");
												shieldZombie1.svgEquiv.setAttribute("onmousedown", "shieldZombie1.loseHealth()");
												shieldZombie1.shieldTimer = setTimeout(function() {
													shieldZombie1.shieldUp();
												}, 4000);
											}
											shieldZombie1.shieldUp = function() {
												shieldZombie1.svgEquiv.setAttribute("opacity", "0.5");
												shieldZombie1.svgEquiv.setAttribute("onmousedown", "");
												shieldZombie1.shieldTimer = setTimeout(function() {
													shieldZombie1.shieldDown();
												}, 2000);
											}

											shieldZombie2 = new Zombie(document.getElementById("shieldZombie2"), 1000, 400, 50, 20, 175);
											shieldZombie2.startPos();
											shieldZombie2.targetPlayer = function() {
												shieldZombie2.stepX = (player.x - shieldZombie2.x) / shieldZombie2.stepMoves;
												shieldZombie2.stepY = (player.y - shieldZombie2.y) / shieldZombie2.stepMoves;
												shieldZombie2.currentStepCount = 0;
												shieldZombie2.stepTimer = setTimeout(function() {
													shieldZombie2.move();
												}, 10);
											}
											shieldZombie2.move = function() {
												shieldZombie2.x += shieldZombie2.stepX;
												shieldZombie2.y += shieldZombie2.stepY;
												shieldZombie2.svgEquiv.setAttribute("transform", "translate("+shieldZombie2.x+" "+shieldZombie2.y+")");
												shieldZombie2.currentStepCount ++;
												if (shieldZombie2.currentStepCount < shieldZombie2.stepMoves) {
													shieldZombie2.stepTimer = setTimeout(function() {
														shieldZombie2.move();
													}, 10);
												} else {
													shieldZombie2.stepTimer = setTimeout(function() {
														shieldZombie2.targetPlayer();
													}, 10);
												}
												shieldZombie2.detectCollisionWithPlayer();
											}
											shieldZombie2.loseHealth = function() {
												shieldZombie2.health --;
												document.getElementById("gunshotSFX").play();
												if (shieldZombie2.health <= 0) {
													// Zombie dies.  Disable Zombie
													shieldZombie2.svgEquiv.setAttribute("visibility", "hidden");
													shieldZombie2.svgEquiv.setAttribute("onmousedown", "");
													clearInterval(shieldZombie2.stepTimer);
													clearInterval(shieldZombie2.shieldTimer);
													shieldZombie2 = undefined;
													shieldZombiesLeft --;
													checkShieldZombiesNum();
												}
											}
											shieldZombie2.shieldTimer = function() {
												void(0);
											}
											shieldZombie2.shieldDown = function() {
												shieldZombie2.svgEquiv.setAttribute("opacity", "1");
												shieldZombie2.svgEquiv.setAttribute("onmousedown", "shieldZombie2.loseHealth()");
												shieldZombie2.shieldTimer = setTimeout(function() {
													shieldZombie2.shieldUp();
												}, 4000);
											}
											shieldZombie2.shieldUp = function() {
												shieldZombie2.svgEquiv.setAttribute("opacity", "0.5");
												shieldZombie2.svgEquiv.setAttribute("onmousedown", "");
												shieldZombie2.shieldTimer = setTimeout(function() {
													shieldZombie2.shieldDown();
												}, 2000);
											}

											function checkShieldZombiesNum() {
												if (shieldZombiesLeft <= 0) {
													unleashFinalBoss();
												}
											}
											function unleashFinalBoss() {
												// Show its health bar
												document.getElementById("finalBossHealthBar").setAttribute("visibility", "visible");
												// Define the Final Boss
												finalBoss = new Zombie(document.getElementById("finalBoss"), 500, 0, 50, 600, 100);
												finalBoss.startPos();
												finalBoss.targetPlayer = function() {
													finalBoss.stepX = (player.x - finalBoss.x) / finalBoss.stepMoves;
													finalBoss.stepY = (player.y - finalBoss.y) / finalBoss.stepMoves;
													finalBoss.currentStepCount = 0;
													finalBoss.stepTimer = setTimeout(function() {
														finalBoss.move();
													}, 10);
												}
												finalBoss.move = function() {
													finalBoss.x += finalBoss.stepX;
													finalBoss.y += finalBoss.stepY;
													finalBoss.svgEquiv.setAttribute("transform", "translate("+finalBoss.x+" "+finalBoss.y+")");
													finalBoss.currentStepCount ++;
													if (finalBoss.currentStepCount < finalBoss.stepMoves) {
														finalBoss.stepTimer = setTimeout(function() {
															finalBoss.move();
														}, 10);
													} else {
														finalBoss.stepTimer = setTimeout(function() {
															finalBoss.targetPlayer();
														}, 10);
													}
													finalBoss.detectCollisionWithPlayer();
												}
												finalBoss.loseHealth = function() {
													finalBoss.health --;
													document.getElementById("gunshotSFX").play();
													document.getElementById("actualFinalBossHealth").setAttribute("width", finalBoss.health);
													if (finalBoss.health <= 0) {
														// Zombie dies.  Disable Zombie
														finalBoss.svgEquiv.setAttribute("visibility", "hidden");
														finalBoss.svgEquiv.setAttribute("onmousedown", "");
														clearInterval(finalBoss.stepTimer);
														clearInterval(finalBoss.shieldTimer);
														finalBoss = undefined;
														// Hide its Health Bar
														document.getElementById("finalBossHealthBar").setAttribute("visibility", "hidden");
														winGame();
													}
												}
												finalBoss.shieldTimer = function() {
													void(0);
												}
												finalBoss.shieldDown = function() {
													finalBoss.svgEquiv.setAttribute("opacity", "1");
													finalBoss.svgEquiv.setAttribute("onmousedown", "finalBoss.loseHealth()");
													finalBoss.shieldTimer = setTimeout(function() {
														finalBoss.shieldUp();
													}, 5000);
												}
												finalBoss.shieldUp = function() {
													finalBoss.svgEquiv.setAttribute("opacity", "0.5");
													finalBoss.svgEquiv.setAttribute("onmousedown", "");
													finalBoss.shieldTimer = setTimeout(function() {
														finalBoss.shieldDown();
													}, 5000);
												}

												function winGame() {
													// Disable and Hide Player
													if (player !== undefined) {
														player.svgEquiv.setAttribute("visibility", "hidden");
													}
													document.onkeydown = function(event) {
														void(0);
													}
													player = undefined;
													// Hide Game Screen and show Game Over Screen
													document.getElementById("gameScene").setAttribute("visibility", "hidden");
													document.getElementById("gameOver").setAttribute("visibility", "visible");
													// Player wins :D
													document.getElementById("gameOverWinText").setAttribute("visibility", "visible");
													// Enable Restart Button
													document.getElementById("gameOverRestart").setAttribute("onmousedown", "location.reload()");
												}

												finalBoss.targetPlayer();
												finalBoss.shieldDown();
											}

											shieldZombie1.targetPlayer();
											shieldZombie1.shieldDown();

											shieldZombie2.targetPlayer();
											shieldZombie2.shieldDown();
										}

										leaderZombie1.svgEquiv.setAttribute("onmousedown", "leaderZombie1.loseHealth()");
										leaderZombie1.targetPlayer();

										leaderZombie2.svgEquiv.setAttribute("onmousedown", "leaderZombie2.loseHealth()");
										leaderZombie2.targetPlayer();

										leaderZombie1.summonFollowers = function() {
											followerZombie11 = new Zombie(document.getElementById("followerZombie11"), 250, 0, 50, 1, 250);
											followerZombie11.startPos();
											followerZombie11.targetPlayer = function() {
												followerZombie11.stepX = (player.x - followerZombie11.x) / followerZombie11.stepMoves;
												followerZombie11.stepY = (player.y - followerZombie11.y) / followerZombie11.stepMoves;
												followerZombie11.currentStepCount = 0;
												followerZombie11.stepTimer = setTimeout(function() {
													followerZombie11.move();
												}, 10);
											}
											followerZombie11.move = function() {
												followerZombie11.x += followerZombie11.stepX;
												followerZombie11.y += followerZombie11.stepY;
												followerZombie11.svgEquiv.setAttribute("transform", "translate("+followerZombie11.x+" "+followerZombie11.y+")");
												followerZombie11.currentStepCount ++;
												if (followerZombie11.currentStepCount < followerZombie11.stepMoves) {
													followerZombie11.stepTimer = setTimeout(function() {
														followerZombie11.move();
													}, 10);
												} else {
													followerZombie11.stepTimer = setTimeout(function() {
														followerZombie11.targetPlayer();
													}, 10);
												}
												followerZombie11.detectCollisionWithPlayer();
											}
											followerZombie11.loseHealth = function() {
												followerZombie11.health --;
												document.getElementById("gunshotSFX").play();
												if (followerZombie11.health <= 0) {
													// Follower Zombie Respawns
													followerZombie11.health = 1;
													followerZombie11.x = 250;
													followerZombie11.y = 0;
													followerZombie11.startPos();
													clearInterval(followerZombie11.stepTimer);
													followerZombie11.targetPlayer();
												}
											}

											followerZombie12 = new Zombie(document.getElementById("followerZombie12"), 750, 0, 50, 1, 250);
											followerZombie12.startPos();
											followerZombie12.targetPlayer = function() {
												followerZombie12.stepX = (player.x - followerZombie12.x) / followerZombie12.stepMoves;
												followerZombie12.stepY = (player.y - followerZombie12.y) / followerZombie12.stepMoves;
												followerZombie12.currentStepCount = 0;
												followerZombie12.stepTimer = setTimeout(function() {
													followerZombie12.move();
												}, 10);
											}
											followerZombie12.move = function() {
												followerZombie12.x += followerZombie12.stepX;
												followerZombie12.y += followerZombie12.stepY;
												followerZombie12.svgEquiv.setAttribute("transform", "translate("+followerZombie12.x+" "+followerZombie12.y+")");
												followerZombie12.currentStepCount ++;
												if (followerZombie12.currentStepCount < followerZombie12.stepMoves) {
													followerZombie12.stepTimer = setTimeout(function() {
														followerZombie12.move();
													}, 10);
												} else {
													followerZombie12.stepTimer = setTimeout(function() {
														followerZombie12.targetPlayer();
													}, 10);
												}
												followerZombie12.detectCollisionWithPlayer();
											}
											followerZombie12.loseHealth = function() {
												followerZombie12.health --;
												document.getElementById("gunshotSFX").play();
												if (followerZombie12.health <= 0) {
													// Follower Zombie Respawns
													followerZombie12.health = 1;
													followerZombie12.x = 750;
													followerZombie12.y = 0;
													followerZombie12.startPos();
													clearInterval(followerZombie12.stepTimer);
													followerZombie12.targetPlayer();
												}
											}

											followerZombie11.svgEquiv.setAttribute("onmousedown", "followerZombie11.loseHealth()");
											followerZombie11.targetPlayer();

											followerZombie12.svgEquiv.setAttribute("onmousedown", "followerZombie12.loseHealth()");
											followerZombie12.targetPlayer();
										}

										leaderZombie2.summonFollowers = function() {
											followerZombie21 = new Zombie(document.getElementById("followerZombie21"), 250, 800, 50, 1, 250);
											followerZombie21.startPos();
											followerZombie21.targetPlayer = function() {
												followerZombie21.stepX = (player.x - followerZombie21.x) / followerZombie21.stepMoves;
												followerZombie21.stepY = (player.y - followerZombie21.y) / followerZombie21.stepMoves;
												followerZombie21.currentStepCount = 0;
												followerZombie21.stepTimer = setTimeout(function() {
													followerZombie21.move();
												}, 10);
											}
											followerZombie21.move = function() {
												followerZombie21.x += followerZombie21.stepX;
												followerZombie21.y += followerZombie21.stepY;
												followerZombie21.svgEquiv.setAttribute("transform", "translate("+followerZombie21.x+" "+followerZombie21.y+")");
												followerZombie21.currentStepCount ++;
												if (followerZombie21.currentStepCount < followerZombie21.stepMoves) {
													followerZombie21.stepTimer = setTimeout(function() {
														followerZombie21.move();
													}, 10);
												} else {
													followerZombie21.stepTimer = setTimeout(function() {
														followerZombie21.targetPlayer();
													}, 10);
												}
												followerZombie21.detectCollisionWithPlayer();
											}
											followerZombie21.loseHealth = function() {
												followerZombie21.health --;
												document.getElementById("gunshotSFX").play();
												if (followerZombie21.health <= 0) {
													// Follower Zombie Respawns
													followerZombie21.health = 1;
													followerZombie21.x = 250;
													followerZombie21.y = 800;
													followerZombie21.startPos();
													clearInterval(followerZombie21.stepTimer);
													followerZombie21.targetPlayer();
												}
											}

											followerZombie22 = new Zombie(document.getElementById("followerZombie22"), 750, 800, 50, 1, 250);
											followerZombie22.startPos();
											followerZombie22.targetPlayer = function() {
												followerZombie22.stepX = (player.x - followerZombie22.x) / followerZombie22.stepMoves;
												followerZombie22.stepY = (player.y - followerZombie22.y) / followerZombie22.stepMoves;
												followerZombie22.currentStepCount = 0;
												followerZombie22.stepTimer = setTimeout(function() {
													followerZombie22.move();
												}, 10);
											}
											followerZombie22.move = function() {
												followerZombie22.x += followerZombie22.stepX;
												followerZombie22.y += followerZombie22.stepY;
												followerZombie22.svgEquiv.setAttribute("transform", "translate("+followerZombie22.x+" "+followerZombie22.y+")");
												followerZombie22.currentStepCount ++;
												if (followerZombie22.currentStepCount < followerZombie22.stepMoves) {
													followerZombie22.stepTimer = setTimeout(function() {
														followerZombie22.move();
													}, 10);
												} else {
													followerZombie22.stepTimer = setTimeout(function() {
														followerZombie22.targetPlayer();
													}, 10);
												}
												followerZombie22.detectCollisionWithPlayer();
											}
											followerZombie22.loseHealth = function() {
												followerZombie22.health --;
												document.getElementById("gunshotSFX").play();
												if (followerZombie22.health <= 0) {
													// Follower Zombie Respawns
													followerZombie22.health = 1;
													followerZombie22.x = 750;
													followerZombie22.y = 800;
													followerZombie22.startPos();
													clearInterval(followerZombie22.stepTimer);
													followerZombie22.targetPlayer();
												}
											}

											followerZombie21.svgEquiv.setAttribute("onmousedown", "followerZombie21.loseHealth()");
											followerZombie21.targetPlayer();

											followerZombie22.svgEquiv.setAttribute("onmousedown", "followerZombie22.loseHealth()");
											followerZombie22.targetPlayer();
										}

										leaderZombie1.summonFollowers();
										leaderZombie2.summonFollowers();
									}

									powerfulBossZombie.svgEquiv.setAttribute("onmousedown", "powerfulBossZombie.loseHealth()");
									powerfulBossZombie.targetPlayer();
									document.getElementById("powerfulBossHealthBar").setAttribute("visibility", "visible");

									powerfulBossZombie.summonLargeMinions = function() {
										largeMinionZombie1 = new Zombie(document.getElementById("largeMinionZombie1"), -75, 875, 75, 5, 300);
										largeMinionZombie1.startPos();
										largeMinionZombie1.targetPlayer = function() {
											largeMinionZombie1.stepX = (player.x - largeMinionZombie1.x) / largeMinionZombie1.stepMoves;
											largeMinionZombie1.stepY = (player.y - largeMinionZombie1.y) / largeMinionZombie1.stepMoves;
											largeMinionZombie1.currentStepCount = 0;
											largeMinionZombie1.stepTimer = setTimeout(function() {
												largeMinionZombie1.move();
											}, 10);
										}
										largeMinionZombie1.move = function() {
											largeMinionZombie1.x += largeMinionZombie1.stepX;
											largeMinionZombie1.y += largeMinionZombie1.stepY;
											largeMinionZombie1.svgEquiv.setAttribute("transform", "translate("+largeMinionZombie1.x+" "+largeMinionZombie1.y+")");
											largeMinionZombie1.currentStepCount ++;
											if (largeMinionZombie1.currentStepCount < largeMinionZombie1.stepMoves) {
												largeMinionZombie1.stepTimer = setTimeout(function() {
													largeMinionZombie1.move();
												}, 10);
											} else {
												largeMinionZombie1.stepTimer = setTimeout(function() {
													largeMinionZombie1.targetPlayer();
												}, 10);
											}
											largeMinionZombie1.detectCollisionWithPlayer();
										}
										largeMinionZombie1.loseHealth = function() {
											largeMinionZombie1.health --;
											document.getElementById("gunshotSFX").play();
											if (largeMinionZombie1.health <= 0) {
												// Minion Zombie Respawns
												largeMinionZombie1.health = 5;
												largeMinionZombie1.x = -75;
												largeMinionZombie1.y = 875;
												largeMinionZombie1.startPos();
												clearInterval(largeMinionZombie1.stepTimer);
												largeMinionZombie1.targetPlayer();
											}
										}

										largeMinionZombie2 = new Zombie(document.getElementById("largeMinionZombie2"), 1075, 875, 75, 5, 300);
										largeMinionZombie2.startPos();
										largeMinionZombie2.targetPlayer = function() {
											largeMinionZombie2.stepX = (player.x - largeMinionZombie2.x) / largeMinionZombie2.stepMoves;
											largeMinionZombie2.stepY = (player.y - largeMinionZombie2.y) / largeMinionZombie2.stepMoves;
											largeMinionZombie2.currentStepCount = 0;
											largeMinionZombie2.stepTimer = setTimeout(function() {
												largeMinionZombie2.move();
											}, 10);
										}
										largeMinionZombie2.move = function() {
											largeMinionZombie2.x += largeMinionZombie2.stepX;
											largeMinionZombie2.y += largeMinionZombie2.stepY;
											largeMinionZombie2.svgEquiv.setAttribute("transform", "translate("+largeMinionZombie2.x+" "+largeMinionZombie2.y+")");
											largeMinionZombie2.currentStepCount ++;
											if (largeMinionZombie2.currentStepCount < largeMinionZombie2.stepMoves) {
												largeMinionZombie2.stepTimer = setTimeout(function() {
													largeMinionZombie2.move();
												}, 10);
											} else {
												largeMinionZombie2.stepTimer = setTimeout(function() {
													largeMinionZombie2.targetPlayer();
												}, 10);
											}
											largeMinionZombie2.detectCollisionWithPlayer();
										}
										largeMinionZombie2.loseHealth = function() {
											largeMinionZombie2.health --;
											document.getElementById("gunshotSFX").play();
											if (largeMinionZombie2.health <= 0) {
												// Minion Zombie Respawns
												largeMinionZombie2.health = 5;
												largeMinionZombie2.x = 1075;
												largeMinionZombie2.y = 875;
												largeMinionZombie2.startPos();
												clearInterval(largeMinionZombie2.stepTimer);
												largeMinionZombie2.targetPlayer();
											}
										}

										largeMinionZombie1.svgEquiv.setAttribute("onmousedown", "largeMinionZombie1.loseHealth()");
										largeMinionZombie1.targetPlayer();

										largeMinionZombie2.svgEquiv.setAttribute("onmousedown", "largeMinionZombie2.loseHealth()");
										largeMinionZombie2.targetPlayer();
									}
									powerfulBossZombie.summonLargeMinions();
								}

								gigaZombie1.svgEquiv.setAttribute("onmousedown", "gigaZombie1.loseHealth()");
								gigaZombie1.targetPlayer();

								gigaZombie2.svgEquiv.setAttribute("onmousedown", "gigaZombie2.loseHealth()");
								gigaZombie2.targetPlayer();

								gigaZombie3.svgEquiv.setAttribute("onmousedown", "gigaZombie3.loseHealth()");
								gigaZombie3.targetPlayer();

								gigaZombie4.svgEquiv.setAttribute("onmousedown", "gigaZombie4.loseHealth()");
								gigaZombie4.targetPlayer();
							}

							largeZombie1.svgEquiv.setAttribute("onmousedown", "largeZombie1.loseHealth()");
							largeZombie1.targetPlayer();

							largeZombie2.svgEquiv.setAttribute("onmousedown", "largeZombie2.loseHealth()");
							largeZombie2.targetPlayer();

							largeZombie3.svgEquiv.setAttribute("onmousedown", "largeZombie3.loseHealth()");
							largeZombie3.targetPlayer();

							largeZombie4.svgEquiv.setAttribute("onmousedown", "largeZombie4.loseHealth()");
							largeZombie4.targetPlayer();
						}

						bossZombie.svgEquiv.setAttribute("onmousedown", "bossZombie.loseHealth()");
						bossZombie.targetPlayer();
						document.getElementById("bossHealthBar").setAttribute("visibility", "visible");
						bossZombie.summonMinions = function() {
							// This is the function where the boss summons his Minions :p
							minionZombie1 = new Zombie(document.getElementById("minionZombie1"), 1000 * Math.random(), 0, 50, 1, 250);
							minionZombie1.startPos();
							minionZombie1.targetPlayer = function() {
								minionZombie1.stepX = (player.x - minionZombie1.x) / minionZombie1.stepMoves;
								minionZombie1.stepY = (player.y - minionZombie1.y) / minionZombie1.stepMoves;
								minionZombie1.currentStepCount = 0;
								minionZombie1.stepTimer = setTimeout(function() {
									minionZombie1.move();
								}, 10);
							}
							minionZombie1.move = function() {
								minionZombie1.x += minionZombie1.stepX;
								minionZombie1.y += minionZombie1.stepY;
								minionZombie1.svgEquiv.setAttribute("transform", "translate("+minionZombie1.x+" "+minionZombie1.y+")");
								minionZombie1.currentStepCount ++;
								if (minionZombie1.currentStepCount < minionZombie1.stepMoves) {
									minionZombie1.stepTimer = setTimeout(function() {
										minionZombie1.move();
									}, 10);
								} else {
									minionZombie1.stepTimer = setTimeout(function() {
										minionZombie1.targetPlayer();
									}, 10);
								}
								minionZombie1.detectCollisionWithPlayer();
							}
							minionZombie1.loseHealth = function() {
								minionZombie1.health --;
								document.getElementById("gunshotSFX").play();
								if (minionZombie1.health <= 0) {
									// Minion Zombie Respawns
									minionZombie1.health = 1;
									minionZombie1.x = 1000 * Math.random();
									minionZombie1.y = 0;
									minionZombie1.startPos();
									clearInterval(minionZombie1.stepTimer);
									minionZombie1.targetPlayer();
								}
							}

							minionZombie2 = new Zombie(document.getElementById("minionZombie2"), 1000 * Math.random(), 800, 50, 1, 250);
							minionZombie2.startPos();
							minionZombie2.targetPlayer = function() {
								minionZombie2.stepX = (player.x - minionZombie2.x) / minionZombie2.stepMoves;
								minionZombie2.stepY = (player.y - minionZombie2.y) / minionZombie2.stepMoves;
								minionZombie2.currentStepCount = 0;
								minionZombie2.stepTimer = setTimeout(function() {
									minionZombie2.move();
								}, 10);
							}
							minionZombie2.move = function() {
								minionZombie2.x += minionZombie2.stepX;
								minionZombie2.y += minionZombie2.stepY;
								minionZombie2.svgEquiv.setAttribute("transform", "translate("+minionZombie2.x+" "+minionZombie2.y+")");
								minionZombie2.currentStepCount ++;
								if (minionZombie2.currentStepCount < minionZombie2.stepMoves) {
									minionZombie2.stepTimer = setTimeout(function() {
										minionZombie2.move();
									}, 10);
								} else {
									minionZombie2.stepTimer = setTimeout(function() {
										minionZombie2.targetPlayer();
									}, 10);
								}
								minionZombie2.detectCollisionWithPlayer();
							}
							minionZombie2.loseHealth = function() {
								minionZombie2.health --;
								document.getElementById("gunshotSFX").play();
								if (minionZombie2.health <= 0) {
									// Minion Zombie Respawns
									minionZombie2.health = 1;
									minionZombie2.x = 1000 * Math.random();
									minionZombie2.y = 800;
									minionZombie2.startPos();
									clearInterval(minionZombie2.stepTimer);
									minionZombie2.targetPlayer();
								}
							}

							minionZombie1.svgEquiv.setAttribute("onmousedown", "minionZombie1.loseHealth()");
							minionZombie1.targetPlayer();

							minionZombie2.svgEquiv.setAttribute("onmousedown", "minionZombie2.loseHealth()");
							minionZombie2.targetPlayer();
						}
						bossZombie.summonMinions();
					}

					hardZombie1.svgEquiv.setAttribute("onmousedown", "hardZombie1.loseHealth()");
					hardZombie1.targetPlayer();

					hardZombie2.svgEquiv.setAttribute("onmousedown", "hardZombie2.loseHealth()");
					hardZombie2.targetPlayer();

					hardZombie3.svgEquiv.setAttribute("onmousedown", "hardZombie3.loseHealth()");
					hardZombie3.targetPlayer();

					hardZombie4.svgEquiv.setAttribute("onmousedown", "hardZombie4.loseHealth()");
					hardZombie4.targetPlayer();
				}

				normalZombie1.svgEquiv.setAttribute("onmousedown", "normalZombie1.loseHealth()");
				normalZombie1.targetPlayer();

				normalZombie2.svgEquiv.setAttribute("onmousedown", "normalZombie2.loseHealth()");
				normalZombie2.targetPlayer();

				normalZombie3.svgEquiv.setAttribute("onmousedown", "normalZombie3.loseHealth()");
				normalZombie3.targetPlayer();

				normalZombie4.svgEquiv.setAttribute("onmousedown", "normalZombie4.loseHealth()");
				normalZombie4.targetPlayer();
			}
		]]>
	</script>
	<defs>
		<linearGradient id="buttonGrad">
			<stop offset="0" style="stop-color: rgb(255, 154, 139);"></stop>
			<stop offset="0.5" style="stop-color: red;"></stop>
			<stop offset="1" style="stop-color: rgb(255, 154, 139);"></stop>
		</linearGradient>
	</defs>
	<g id="startScreen" visibility="visible">
		<text x="125" y="150" style="font-Size: 75px; fill: red;">ZOMBIE MASSACRE</text>
		<g id="startButton" onmousedown="showInstructions()">
			<rect x="350" y="360" width="300" height="80" style="fill: url(#buttonGrad);"></rect>
			<text x="375" y="410" style="font-Size: 40px; fill: black;">START GAME</text>
		</g>
	</g>
	<g id="instructions" visibility="hidden">
		<text x="300" y="100" style="font-Size: 50px; fill: red;">INSTRUCTIONS</text>
		<text x="100" y="150" style="font-Size: 25px; fill: red;">1. Use the WASD keys to move around.  Click on zombies to shoot them.</text>
		<text x="100" y="200" style="font-Size: 25px; fill: red;">2. Most zombies will take more than one hit to kill them.</text>
		<text x="100" y="250" style="font-Size: 25px; fill: red;">3. When a wave of zombies is defeated, the next wave will arrive.</text>
		<text x="100" y="300" style="font-Size: 25px; fill: red;">4. A boss appears every third wave.  There are 9 waves in total.</text>
		<text x="100" y="350" style="font-Size: 25px; fill: red;">5. When fighting a boss, a health bar will accompany it to show its remaining health.</text>
		<g id="proceed" onmousedown="init()">
			<rect x="350" y="570" width="300" height="60" style="fill: url(#buttonGrad);"></rect>
			<text x="375" y="610" style="font-Size: 20px; fill: black;">I UNDERSTAND, CONTINUE</text>
		</g>
	</g>
	<g id="gameScene" visibility="hidden">
		<g id="horizontalRoad">
			<rect x="0" y="350" width="1000" height="100" style="fill: grey;"></rect>
			<rect x="0" y="390" width="100" height="20" style="fill: white;"></rect>
			<rect x="150" y="390" width="100" height="20" style="fill: white;"></rect>
			<rect x="300" y="390" width="100" height="20" style="fill: white;"></rect>
			<rect x="600" y="390" width="100" height="20" style="fill: white;"></rect>
			<rect x="750" y="390" width="100" height="20" style="fill: white;"></rect>
			<rect x="900" y="390" width="100" height="20" style="fill: white;"></rect>
		</g>
		<g id="verticalRoad">
			<rect x="450" y="0" width="100" height="1000" style="fill: grey;"></rect>
			<rect x="490" y="0" width="20" height="100" style="fill: white;"></rect>
			<rect x="490" y="150" width="20" height="100" style="fill: white;"></rect>
			<rect x="490" y="300" width="20" height="100" style="fill: white;"></rect>
			<rect x="490" y="450" width="20" height="100" style="fill: white;"></rect>
			<rect x="490" y="600" width="20" height="100" style="fill: white;"></rect>
			<rect x="490" y="750" width="20" height="100" style="fill: white;"></rect>
		</g>
		<g id="player" visibility="hidden">
			<g id="playerTransform" transform="translate(0 0)">
				<circle cx="0" cy="0" r="50" style="fill: #ffe9b3; stroke: #ffe9b3;"></circle>
				<ellipse cx="-15" cy="-20" rx="10" ry="20" style="fill: white; stroke: black;"></ellipse>
				<ellipse cx="15" cy="-20" rx="10" ry="20" style="fill: white; stroke: black;"></ellipse>
				<circle cx="-15" cy="-5" r="5" style="fill: black;">
					<animateTransform attributeName="transform" type="translate" additive="sum" begin="0s" dur="3s" values="0 0; -5 -15; 0 -30; 5 -15; 0 0" repeatCount="indefinite" />
				</circle>
				<circle cx="15" cy="-5" r="5" style="fill: black;">
					<animateTransform attributeName="transform" type="translate" additive="sum" begin="0s" dur="3s" values="0 0; -5 -15; 0 -30; 5 -15; 0 0" repeatCount="indefinite" />
				</circle>
				<path d="M -20 20 L -18 25 L -16 29 L -14 32 L -12 35 L -10 37 L -5 39 L 0 40 L 5 39 L 10 37 L 12 35 L 14 32 L 16 29 L 18 25 L 20 20 z" style="fill: red; stroke: black;"></path>
			</g>
		</g>
		<g id="normalZombie1" visibility="hidden">
			<g id="normalZombie1Transform" transform="translate(0 0)">
				<circle cx="0" cy="0" r="50" style="fill: #A7FFA7; stroke: #A7FFA7;"></circle>
				<circle cx="-15" cy="-22.5" r="10" style="fill: white; stroke: black;"></circle>
				<circle cx="15" cy="-22.5" r="10" style="fill: white; stroke: black;"></circle>
				<circle cx="-15" cy="-17.5" r="5" style="fill: black; stroke: black;">
					<animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="2s" values="270 -15 -22.5; 450 -15 -22.5; 270 -15 -22.5" repeatCount="indefinite" />
				</circle>
				<circle cx="15" cy="-17.5" r="5" style="fill: black; stroke: black;">
					<animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="2s" values="270 15 -22.5; 450 15 -22.5; 270 15 -22.5" repeatCount="indefinite" />
				</circle>
				<circle cx="0" cy="25" r="17.5" style="fill: red; stroke: black; stroke-width: 5;"></circle>
			</g>
		</g>
		<g id="normalZombie2" visibility="hidden">
			<g id="normalZombie2Transform" transform="translate(0 0)">
				<circle cx="0" cy="0" r="50" style="fill: #A7FFA7; stroke: #A7FFA7;"></circle>
				<circle cx="-15" cy="-22.5" r="10" style="fill: white; stroke: black;"></circle>
				<circle cx="15" cy="-22.5" r="10" style="fill: white; stroke: black;"></circle>
				<circle cx="-15" cy="-17.5" r="5" style="fill: black; stroke: black;">
					<animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="2s" values="270 -15 -22.5; 450 -15 -22.5; 270 -15 -22.5" repeatCount="indefinite" />
				</circle>
				<circle cx="15" cy="-17.5" r="5" style="fill: black; stroke: black;">
					<animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="2s" values="270 15 -22.5; 450 15 -22.5; 270 15 -22.5" repeatCount="indefinite" />
				</circle>
				<circle cx="0" cy="25" r="17.5" style="fill: red; stroke: black; stroke-width: 5;"></circle>
			</g>
		</g>
		<g id="normalZombie3" visibility="hidden">
			<g id="normalZombie3Transform" transform="translate(0 0)">
				<circle cx="0" cy="0" r="50" style="fill: #A7FFA7; stroke: #A7FFA7;"></circle>
				<circle cx="-15" cy="-22.5" r="10" style="fill: white; stroke: black;"></circle>
				<circle cx="15" cy="-22.5" r="10" style="fill: white; stroke: black;"></circle>
				<circle cx="-15" cy="-17.5" r="5" style="fill: black; stroke: black;">
					<animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="2s" values="270 -15 -22.5; 450 -15 -22.5; 270 -15 -22.5" repeatCount="indefinite" />
				</circle>
				<circle cx="15" cy="-17.5" r="5" style="fill: black; stroke: black;">
					<animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="2s" values="270 15 -22.5; 450 15 -22.5; 270 15 -22.5" repeatCount="indefinite" />
				</circle>
				<circle cx="0" cy="25" r="17.5" style="fill: red; stroke: black; stroke-width: 5;"></circle>
			</g>
		</g>
		<g id="normalZombie4" visibility="hidden">
			<g id="normalZombie4Transform" transform="translate(0 0)">
				<circle cx="0" cy="0" r="50" style="fill: #A7FFA7; stroke: #A7FFA7;"></circle>
				<circle cx="-15" cy="-22.5" r="10" style="fill: white; stroke: black;"></circle>
				<circle cx="15" cy="-22.5" r="10" style="fill: white; stroke: black;"></circle>
				<circle cx="-15" cy="-17.5" r="5" style="fill: black; stroke: black;">
					<animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="2s" values="270 -15 -22.5; 450 -15 -22.5; 270 -15 -22.5" repeatCount="indefinite" />
				</circle>
				<circle cx="15" cy="-17.5" r="5" style="fill: black; stroke: black;">
					<animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="2s" values="270 15 -22.5; 450 15 -22.5; 270 15 -22.5" repeatCount="indefinite" />
				</circle>
				<circle cx="0" cy="25" r="17.5" style="fill: red; stroke: black; stroke-width: 5;"></circle>
			</g>
		</g>
		<g id="hardZombie1" visibility="hidden">
			<g id="hardZombie1Transform" transform="translate(0 0)">
				<circle cx="0" cy="0" r="50" style="fill: red; stroke: red;"></circle>
				<circle cx="-15" cy="-22.5" r="10" style="fill: #a7ffa7; stroke: black;"></circle>
				<circle cx="15" cy="-22.5" r="10" style="fill: #a7ffa7; stroke: black;"></circle>
				<circle cx="-15" cy="-17.5" r="5" style="fill: black; stroke: black;">
					<animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="2s" values="270 -15 -22.5; 450 -15 -22.5; 270 -15 -22.5" repeatCount="indefinite" />
				</circle>
				<circle cx="15" cy="-17.5" r="5" style="fill: black; stroke: black;">
					<animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="2s" values="270 15 -22.5; 450 15 -22.5; 270 15 -22.5" repeatCount="indefinite" />
				</circle>
				<circle cx="0" cy="25" r="17.5" style="fill: black; stroke: black; stroke-width: 5;"></circle>
			</g>
		</g>
		<g id="hardZombie2" visibility="hidden">
			<g id="hardZombie2Transform" transform="translate(0 0)">
				<circle cx="0" cy="0" r="50" style="fill: red; stroke: red;"></circle>
				<circle cx="-15" cy="-22.5" r="10" style="fill: #a7ffa7; stroke: black;"></circle>
				<circle cx="15" cy="-22.5" r="10" style="fill: #a7ffa7; stroke: black;"></circle>
				<circle cx="-15" cy="-17.5" r="5" style="fill: black; stroke: black;">
					<animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="2s" values="270 -15 -22.5; 450 -15 -22.5; 270 -15 -22.5" repeatCount="indefinite" />
				</circle>
				<circle cx="15" cy="-17.5" r="5" style="fill: black; stroke: black;">
					<animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="2s" values="270 15 -22.5; 450 15 -22.5; 270 15 -22.5" repeatCount="indefinite" />
				</circle>
				<circle cx="0" cy="25" r="17.5" style="fill: black; stroke: black; stroke-width: 5;"></circle>
			</g>
		</g>
		<g id="hardZombie3" visibility="hidden">
			<g id="hardZombie3Transform" transform="translate(0 0)">
				<circle cx="0" cy="0" r="50" style="fill: red; stroke: red;"></circle>
				<circle cx="-15" cy="-22.5" r="10" style="fill: #a7ffa7; stroke: black;"></circle>
				<circle cx="15" cy="-22.5" r="10" style="fill: #a7ffa7; stroke: black;"></circle>
				<circle cx="-15" cy="-17.5" r="5" style="fill: black; stroke: black;">
					<animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="2s" values="270 -15 -22.5; 450 -15 -22.5; 270 -15 -22.5" repeatCount="indefinite" />
				</circle>
				<circle cx="15" cy="-17.5" r="5" style="fill: black; stroke: black;">
					<animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="2s" values="270 15 -22.5; 450 15 -22.5; 270 15 -22.5" repeatCount="indefinite" />
				</circle>
				<circle cx="0" cy="25" r="17.5" style="fill: black; stroke: black; stroke-width: 5;"></circle>
			</g>
		</g>
		<g id="hardZombie4" visibility="hidden">
			<g id="hardZombie4Transform" transform="translate(0 0)">
				<circle cx="0" cy="0" r="50" style="fill: red; stroke: red;"></circle>
				<circle cx="-15" cy="-22.5" r="10" style="fill: #a7ffa7; stroke: black;"></circle>
				<circle cx="15" cy="-22.5" r="10" style="fill: #a7ffa7; stroke: black;"></circle>
				<circle cx="-15" cy="-17.5" r="5" style="fill: black; stroke: black;">
					<animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="2s" values="270 -15 -22.5; 450 -15 -22.5; 270 -15 -22.5" repeatCount="indefinite" />
				</circle>
				<circle cx="15" cy="-17.5" r="5" style="fill: black; stroke: black;">
					<animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="2s" values="270 15 -22.5; 450 15 -22.5; 270 15 -22.5" repeatCount="indefinite" />
				</circle>
				<circle cx="0" cy="25" r="17.5" style="fill: black; stroke: black; stroke-width: 5;"></circle>
			</g>
		</g>
		<g id="minionZombie1" visibility="hidden">
			<g id="minionZombie1Transform" transform="translate(0 0)">
				<circle cx="0" cy="0" r="50" style="fill: yellow; stroke: yellow;"></circle>
				<circle cx="-15" cy="-22.5" r="10" style="fill: white; stroke: black;"></circle>
				<circle cx="15" cy="-22.5" r="10" style="fill: white; stroke: black;"></circle>
				<circle cx="-15" cy="-17.5" r="5" style="fill: black; stroke: black;">
					<animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="0.5s" values="0 -15 -22.5; 360 -15 -22.5" repeatCount="indefinite" />
				</circle>
				<circle cx="15" cy="-17.5" r="5" style="fill: black; stroke: black;">
					<animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="0.5s" values="180 15 -22.5; 540 15 -22.5" repeatCount="indefinite" />
				</circle>
				<circle cx="0" cy="25" r="17.5" style="fill: red; stroke: black; stroke-width: 5;"></circle>
			</g>
		</g>
		<g id="minionZombie2" visibility="hidden">
			<g id="minionZombie2Transform" transform="translate(0 0)">
				<circle cx="0" cy="0" r="50" style="fill: yellow; stroke: yellow;"></circle>
				<circle cx="-15" cy="-22.5" r="10" style="fill: white; stroke: black;"></circle>
				<circle cx="15" cy="-22.5" r="10" style="fill: white; stroke: black;"></circle>
				<circle cx="-15" cy="-17.5" r="5" style="fill: black; stroke: black;">
					<animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="0.5s" values="0 -15 -22.5; 360 -15 -22.5" repeatCount="indefinite" />
				</circle>
				<circle cx="15" cy="-17.5" r="5" style="fill: black; stroke: black;">
					<animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="0.5s" values="180 15 -22.5; 540 15 -22.5" repeatCount="indefinite" />
				</circle>
				<circle cx="0" cy="25" r="17.5" style="fill: red; stroke: black; stroke-width: 5;"></circle>
			</g>
		</g>
		<g id="bossZombie" visibility="hidden">
			<g id="bossZombieTransform" transform="translate(0 0)">
				<circle cx="0" cy="0" r="200" style="fill: green; stroke: green;"></circle>
				<circle cx="-60" cy="-90" r="40" style="fill: red; stroke: black;"></circle>
				<circle cx="60" cy="-90" r="40" style="fill: red; stroke: black;"></circle>
				<circle cx="-60" cy="-70" r="20" style="fill: black; stroke: black;">
					<animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="1s" values="0 -60 -90; 360 -60 -90" repeatCount="indefinite" />
				</circle>
				<circle cx="60" cy="-70" r="20" style="fill: black; stroke: black;">
					<animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="1s" values="0 60 -90; 360 60 -90" repeatCount="indefinite" />
				</circle>
				<circle cx="0" cy="100" r="70" style="fill: black; stroke: black; stroke-width: 5;"></circle>
			</g>
		</g>
		<g id="bossHealthBar" visibility="hidden">
			<rect x="200" y="50" width="600" height="50" style="stroke: black; opacity: 0.25;"></rect>
			<rect x="200" y="50" width="600" height="50" style="stroke: black; fill: green;" id="actualBossHealth"></rect>
		</g>
		<g id="largeZombie1" visibility="hidden">
	    <g id="largeZombie1Transform" transform="translate(0 0)">
	      <circle cx="0" cy="0" r="75" style="fill: purple; stroke: black;"></circle>
	      <circle cx="-22.5" cy="-33.75" r="15" style="fill: white; stroke: black;"></circle>
	      <circle cx="22.5" cy="-33.75" r="15" style="fill: white; stroke: black;"></circle>
	      <circle cx="-22.5" cy="-26.25" r="7.5" style="fill: black; stroke: black;">
	        <animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="2s" values="270 -22.5 -33.75; 450 -22.5 -33.75; 270 -22.5 -33.75" repeatCount="indefinite" />
	      </circle>
	      <circle cx="22.5" cy="-26.25" r="7.5" style="fill: black; stroke: black;">
	        <animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="2s" values="270 22.5 -33.75; 450 22.5 -33.75; 270 22.5 -33.75" repeatCount="indefinite" />
	      </circle>
	      <circle cx="0" cy="37.5" r="26.25" style="fill: red; stroke: black; stroke-width: 5;"></circle>
	    </g>
	  </g>
		<g id="largeZombie2" visibility="hidden">
	    <g id="largeZombie2Transform" transform="translate(0 0)">
	      <circle cx="0" cy="0" r="75" style="fill: purple; stroke: black;"></circle>
	      <circle cx="-22.5" cy="-33.75" r="15" style="fill: white; stroke: black;"></circle>
	      <circle cx="22.5" cy="-33.75" r="15" style="fill: white; stroke: black;"></circle>
	      <circle cx="-22.5" cy="-26.25" r="7.5" style="fill: black; stroke: black;">
	        <animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="2s" values="270 -22.5 -33.75; 450 -22.5 -33.75; 270 -22.5 -33.75" repeatCount="indefinite" />
	      </circle>
	      <circle cx="22.5" cy="-26.25" r="7.5" style="fill: black; stroke: black;">
	        <animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="2s" values="270 22.5 -33.75; 450 22.5 -33.75; 270 22.5 -33.75" repeatCount="indefinite" />
	      </circle>
	      <circle cx="0" cy="37.5" r="26.25" style="fill: red; stroke: black; stroke-width: 5;"></circle>
	    </g>
	  </g>
		<g id="largeZombie3" visibility="hidden">
	    <g id="largeZombie3Transform" transform="translate(0 0)">
	      <circle cx="0" cy="0" r="75" style="fill: purple; stroke: black;"></circle>
	      <circle cx="-22.5" cy="-33.75" r="15" style="fill: white; stroke: black;"></circle>
	      <circle cx="22.5" cy="-33.75" r="15" style="fill: white; stroke: black;"></circle>
	      <circle cx="-22.5" cy="-26.25" r="7.5" style="fill: black; stroke: black;">
	        <animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="2s" values="270 -22.5 -33.75; 450 -22.5 -33.75; 270 -22.5 -33.75" repeatCount="indefinite" />
	      </circle>
	      <circle cx="22.5" cy="-26.25" r="7.5" style="fill: black; stroke: black;">
	        <animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="2s" values="270 22.5 -33.75; 450 22.5 -33.75; 270 22.5 -33.75" repeatCount="indefinite" />
	      </circle>
	      <circle cx="0" cy="37.5" r="26.25" style="fill: red; stroke: black; stroke-width: 5;"></circle>
	    </g>
	  </g>
		<g id="largeZombie4" visibility="hidden">
	    <g id="largeZombie4Transform" transform="translate(0 0)">
	      <circle cx="0" cy="0" r="75" style="fill: purple; stroke: black;"></circle>
	      <circle cx="-22.5" cy="-33.75" r="15" style="fill: white; stroke: black;"></circle>
	      <circle cx="22.5" cy="-33.75" r="15" style="fill: white; stroke: black;"></circle>
	      <circle cx="-22.5" cy="-26.25" r="7.5" style="fill: black; stroke: black;">
	        <animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="2s" values="270 -22.5 -33.75; 450 -22.5 -33.75; 270 -22.5 -33.75" repeatCount="indefinite" />
	      </circle>
	      <circle cx="22.5" cy="-26.25" r="7.5" style="fill: black; stroke: black;">
	        <animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="2s" values="270 22.5 -33.75; 450 22.5 -33.75; 270 22.5 -33.75" repeatCount="indefinite" />
	      </circle>
	      <circle cx="0" cy="37.5" r="26.25" style="fill: red; stroke: black; stroke-width: 5;"></circle>
	    </g>
	  </g>
		<g id="gigaZombie1" visibility="hidden">
	    <g id="gigaZombie1Transform" transform="translate(0 0)">
	      <circle cx="0" cy="0" r="100" style="fill: brown; stroke: maroon;"></circle>
	      <circle cx="-30" cy="-45" r="20" style="fill: white; stroke: black;"></circle>
	      <circle cx="30" cy="-45" r="20" style="fill: white; stroke: black;"></circle>
	      <circle cx="-30" cy="-35" r="10" style="fill: black; stroke: black;">
	        <animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="2s" values="270 -30 -45; 450 -30 -45; 270 -30 -45" repeatCount="indefinite" />
	      </circle>
	      <circle cx="30" cy="-35" r="10" style="fill: black; stroke: black;">
	        <animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="2s" values="270 30 -45; 450 30 -45; 270 30 -45" repeatCount="indefinite" />
	      </circle>
	      <circle cx="0" cy="50" r="35" style="fill: red; stroke: black; stroke-width: 5;"></circle>
	    </g>
	  </g>
		<g id="gigaZombie2" visibility="hidden">
	    <g id="gigaZombie2Transform" transform="translate(0 0)">
	      <circle cx="0" cy="0" r="100" style="fill: brown; stroke: maroon;"></circle>
	      <circle cx="-30" cy="-45" r="20" style="fill: white; stroke: black;"></circle>
	      <circle cx="30" cy="-45" r="20" style="fill: white; stroke: black;"></circle>
	      <circle cx="-30" cy="-35" r="10" style="fill: black; stroke: black;">
	        <animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="2s" values="270 -30 -45; 450 -30 -45; 270 -30 -45" repeatCount="indefinite" />
	      </circle>
	      <circle cx="30" cy="-35" r="10" style="fill: black; stroke: black;">
	        <animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="2s" values="270 30 -45; 450 30 -45; 270 30 -45" repeatCount="indefinite" />
	      </circle>
	      <circle cx="0" cy="50" r="35" style="fill: red; stroke: black; stroke-width: 5;"></circle>
	    </g>
	  </g>
		<g id="gigaZombie3" visibility="hidden">
	    <g id="gigaZombie3Transform" transform="translate(0 0)">
	      <circle cx="0" cy="0" r="100" style="fill: brown; stroke: maroon;"></circle>
	      <circle cx="-30" cy="-45" r="20" style="fill: white; stroke: black;"></circle>
	      <circle cx="30" cy="-45" r="20" style="fill: white; stroke: black;"></circle>
	      <circle cx="-30" cy="-35" r="10" style="fill: black; stroke: black;">
	        <animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="2s" values="270 -30 -45; 450 -30 -45; 270 -30 -45" repeatCount="indefinite" />
	      </circle>
	      <circle cx="30" cy="-35" r="10" style="fill: black; stroke: black;">
	        <animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="2s" values="270 30 -45; 450 30 -45; 270 30 -45" repeatCount="indefinite" />
	      </circle>
	      <circle cx="0" cy="50" r="35" style="fill: red; stroke: black; stroke-width: 5;"></circle>
	    </g>
	  </g>
		<g id="gigaZombie4" visibility="hidden">
	    <g id="gigaZombie4Transform" transform="translate(0 0)">
	      <circle cx="0" cy="0" r="100" style="fill: brown; stroke: maroon;"></circle>
	      <circle cx="-30" cy="-45" r="20" style="fill: white; stroke: black;"></circle>
	      <circle cx="30" cy="-45" r="20" style="fill: white; stroke: black;"></circle>
	      <circle cx="-30" cy="-35" r="10" style="fill: black; stroke: black;">
	        <animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="2s" values="270 -30 -45; 450 -30 -45; 270 -30 -45" repeatCount="indefinite" />
	      </circle>
	      <circle cx="30" cy="-35" r="10" style="fill: black; stroke: black;">
	        <animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="2s" values="270 30 -45; 450 30 -45; 270 30 -45" repeatCount="indefinite" />
	      </circle>
	      <circle cx="0" cy="50" r="35" style="fill: red; stroke: black; stroke-width: 5;"></circle>
	    </g>
	  </g>
		<g id="largeMinionZombie1" visibility="hidden">
	    <g id="largeMinionZombie1Transform" transform="translate(0 0)">
	      <circle cx="0" cy="0" r="75" style="fill: yellow; stroke: black;"></circle>
	      <circle cx="-22.5" cy="-33.75" r="15" style="fill: white; stroke: black;"></circle>
	      <circle cx="22.5" cy="-33.75" r="15" style="fill: white; stroke: black;"></circle>
	      <circle cx="-22.5" cy="-26.25" r="7.5" style="fill: black; stroke: black;">
	        <animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="0.5s" values="180 -22.5 -33.75; 540 -22.5 -33.75" repeatCount="indefinite" />
	      </circle>
	      <circle cx="22.5" cy="-26.25" r="7.5" style="fill: black; stroke: black;">
	        <animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="0.5s" values="0 22.5 -33.75; 360 22.5 -33.75" repeatCount="indefinite" />
	      </circle>
	      <circle cx="0" cy="37.5" r="26.25" style="fill: red; stroke: black; stroke-width: 5;"></circle>
	    </g>
	  </g>
		<g id="largeMinionZombie2" visibility="hidden">
	    <g id="largeMinionZombie2Transform" transform="translate(0 0)">
	      <circle cx="0" cy="0" r="75" style="fill: yellow; stroke: black;"></circle>
	      <circle cx="-22.5" cy="-33.75" r="15" style="fill: white; stroke: black;"></circle>
	      <circle cx="22.5" cy="-33.75" r="15" style="fill: white; stroke: black;"></circle>
	      <circle cx="-22.5" cy="-26.25" r="7.5" style="fill: black; stroke: black;">
	        <animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="0.5s" values="180 -22.5 -33.75; 540 -22.5 -33.75" repeatCount="indefinite" />
	      </circle>
	      <circle cx="22.5" cy="-26.25" r="7.5" style="fill: black; stroke: black;">
	        <animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="0.5s" values="0 22.5 -33.75; 360 22.5 -33.75" repeatCount="indefinite" />
	      </circle>
	      <circle cx="0" cy="37.5" r="26.25" style="fill: red; stroke: black; stroke-width: 5;"></circle>
	    </g>
	  </g>
		<g id="powerfulBossZombie" visibility="hidden">
	    <g id="powerfulBossZombieTransform" transform="translate(0 0)">
	      <circle cx="0" cy="0" r="200" style="fill: brown; stroke: maroon;"></circle>
	      <circle cx="-60" cy="-90" r="40" style="fill: green; stroke: black;"></circle>
	      <circle cx="60" cy="-90" r="40" style="fill: green; stroke: black;"></circle>
	      <circle cx="-60" cy="-70" r="20" style="fill: black; stroke: black;">
	        <animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="1s" values="0 -60 -90; 360 -60 -90" repeatCount="indefinite" />
	      </circle>
	      <circle cx="60" cy="-70" r="20" style="fill: black; stroke: black;">
	        <animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="1s" values="0 60 -90; 360 60 -90" repeatCount="indefinite" />
	      </circle>
	      <circle cx="0" cy="100" r="70" style="fill: black; stroke: black; stroke-width: 5;"></circle>
	    </g>
	  </g>
		<g id="powerfulBossHealthBar" visibility="hidden">
			<rect x="200" y="50" width="600" height="50" style="stroke: black; opacity: 0.25;"></rect>
			<rect x="200" y="50" width="600" height="50" style="stroke: black; fill: brown;" id="actualPowerfulBossHealth"></rect>
		</g>
		<g id="leaderZombie1" visibility="hidden">
	    <g id="leaderZombie1Transform" transform="translate(0 0)">
	      <circle cx="0" cy="0" r="50" style="fill: pink; stroke: pink;"></circle>
	      <circle cx="-15" cy="-22.5" r="10" style="fill: white; stroke: black;"></circle>
	      <circle cx="15" cy="-22.5" r="10" style="fill: white; stroke: black;"></circle>
	      <circle cx="-15" cy="-17.5" r="5" style="fill: black; stroke: black;">
	        <animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="2s" values="270 -15 -22.5; 450 -15 -22.5; 270 -15 -22.5" repeatCount="indefinite" />
	      </circle>
	      <circle cx="15" cy="-17.5" r="5" style="fill: black; stroke: black;">
	        <animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="2s" values="270 15 -22.5; 450 15 -22.5; 270 15 -22.5" repeatCount="indefinite" />
	      </circle>
	      <circle cx="0" cy="25" r="17.5" style="fill: red; stroke: black; stroke-width: 5;"></circle>
	    </g>
	  </g>
		<g id="leaderZombie2" visibility="hidden">
	    <g id="leaderZombie2Transform" transform="translate(0 0)">
	      <circle cx="0" cy="0" r="50" style="fill: pink; stroke: pink;"></circle>
	      <circle cx="-15" cy="-22.5" r="10" style="fill: white; stroke: black;"></circle>
	      <circle cx="15" cy="-22.5" r="10" style="fill: white; stroke: black;"></circle>
	      <circle cx="-15" cy="-17.5" r="5" style="fill: black; stroke: black;">
	        <animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="2s" values="270 -15 -22.5; 450 -15 -22.5; 270 -15 -22.5" repeatCount="indefinite" />
	      </circle>
	      <circle cx="15" cy="-17.5" r="5" style="fill: black; stroke: black;">
	        <animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="2s" values="270 15 -22.5; 450 15 -22.5; 270 15 -22.5" repeatCount="indefinite" />
	      </circle>
	      <circle cx="0" cy="25" r="17.5" style="fill: red; stroke: black; stroke-width: 5;"></circle>
	    </g>
	  </g>
		<g id="followerZombie11" visibility="hidden">
	    <g id="followerZombie11Transform" transform="translate(0 0)">
	      <circle cx="0" cy="0" r="50" style="fill: pink; stroke: pink;"></circle>
	      <circle cx="-15" cy="-22.5" r="10" style="fill: white; stroke: black;"></circle>
	      <circle cx="15" cy="-22.5" r="10" style="fill: white; stroke: black;"></circle>
	      <circle cx="-15" cy="-17.5" r="5" style="fill: black; stroke: black;">
	        <animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="0.5s" values="0 -15 -22.5; 360 -15 -22.5" repeatCount="indefinite" />
	      </circle>
	      <circle cx="15" cy="-17.5" r="5" style="fill: black; stroke: black;">
	        <animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="0.5s" values="180 15 -22.5; 540 15 -22.5" repeatCount="indefinite" />
	      </circle>
	      <circle cx="0" cy="25" r="17.5" style="fill: red; stroke: black; stroke-width: 5;"></circle>
	    </g>
	  </g>
		<g id="followerZombie12" visibility="hidden">
	    <g id="followerZombie12Transform" transform="translate(0 0)">
	      <circle cx="0" cy="0" r="50" style="fill: pink; stroke: pink;"></circle>
	      <circle cx="-15" cy="-22.5" r="10" style="fill: white; stroke: black;"></circle>
	      <circle cx="15" cy="-22.5" r="10" style="fill: white; stroke: black;"></circle>
	      <circle cx="-15" cy="-17.5" r="5" style="fill: black; stroke: black;">
	        <animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="0.5s" values="0 -15 -22.5; 360 -15 -22.5" repeatCount="indefinite" />
	      </circle>
	      <circle cx="15" cy="-17.5" r="5" style="fill: black; stroke: black;">
	        <animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="0.5s" values="180 15 -22.5; 540 15 -22.5" repeatCount="indefinite" />
	      </circle>
	      <circle cx="0" cy="25" r="17.5" style="fill: red; stroke: black; stroke-width: 5;"></circle>
	    </g>
	  </g>
		<g id="followerZombie21" visibility="hidden">
	    <g id="followerZombie21Transform" transform="translate(0 0)">
	      <circle cx="0" cy="0" r="50" style="fill: pink; stroke: pink;"></circle>
	      <circle cx="-15" cy="-22.5" r="10" style="fill: white; stroke: black;"></circle>
	      <circle cx="15" cy="-22.5" r="10" style="fill: white; stroke: black;"></circle>
	      <circle cx="-15" cy="-17.5" r="5" style="fill: black; stroke: black;">
	        <animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="0.5s" values="0 -15 -22.5; 360 -15 -22.5" repeatCount="indefinite" />
	      </circle>
	      <circle cx="15" cy="-17.5" r="5" style="fill: black; stroke: black;">
	        <animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="0.5s" values="180 15 -22.5; 540 15 -22.5" repeatCount="indefinite" />
	      </circle>
	      <circle cx="0" cy="25" r="17.5" style="fill: red; stroke: black; stroke-width: 5;"></circle>
	    </g>
	  </g>
		<g id="followerZombie22" visibility="hidden">
	    <g id="followerZombie22Transform" transform="translate(0 0)">
	      <circle cx="0" cy="0" r="50" style="fill: pink; stroke: pink;"></circle>
	      <circle cx="-15" cy="-22.5" r="10" style="fill: white; stroke: black;"></circle>
	      <circle cx="15" cy="-22.5" r="10" style="fill: white; stroke: black;"></circle>
	      <circle cx="-15" cy="-17.5" r="5" style="fill: black; stroke: black;">
	        <animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="0.5s" values="0 -15 -22.5; 360 -15 -22.5" repeatCount="indefinite" />
	      </circle>
	      <circle cx="15" cy="-17.5" r="5" style="fill: black; stroke: black;">
	        <animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="0.5s" values="180 15 -22.5; 540 15 -22.5" repeatCount="indefinite" />
	      </circle>
	      <circle cx="0" cy="25" r="17.5" style="fill: red; stroke: black; stroke-width: 5;"></circle>
	    </g>
	  </g>
		<g id="shieldZombie1" visibility="hidden">
	    <g id="shieldZombie1Transform" transform="translate(0 0)">
	      <circle cx="0" cy="0" r="50" style="fill: orange; stroke: black;"></circle>
	      <circle cx="-15" cy="-22.5" r="10" style="fill: white; stroke: black;"></circle>
	      <circle cx="15" cy="-22.5" r="10" style="fill: white; stroke: black;"></circle>
	      <circle cx="-15" cy="-17.5" r="5" style="fill: black; stroke: black;">
	        <animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="2s" values="270 -15 -22.5; 450 -15 -22.5; 270 -15 -22.5" repeatCount="indefinite" />
	      </circle>
	      <circle cx="15" cy="-17.5" r="5" style="fill: black; stroke: black;">
	        <animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="2s" values="270 15 -22.5; 450 15 -22.5; 270 15 -22.5" repeatCount="indefinite" />
	      </circle>
	      <circle cx="0" cy="25" r="17.5" style="fill: red; stroke: black; stroke-width: 5;"></circle>
	    </g>
	  </g>
		<g id="shieldZombie2" visibility="hidden">
	    <g id="shieldZombie2Transform" transform="translate(0 0)">
	      <circle cx="0" cy="0" r="50" style="fill: orange; stroke: black;"></circle>
	      <circle cx="-15" cy="-22.5" r="10" style="fill: white; stroke: black;"></circle>
	      <circle cx="15" cy="-22.5" r="10" style="fill: white; stroke: black;"></circle>
	      <circle cx="-15" cy="-17.5" r="5" style="fill: black; stroke: black;">
	        <animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="2s" values="270 -15 -22.5; 450 -15 -22.5; 270 -15 -22.5" repeatCount="indefinite" />
	      </circle>
	      <circle cx="15" cy="-17.5" r="5" style="fill: black; stroke: black;">
	        <animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="2s" values="270 15 -22.5; 450 15 -22.5; 270 15 -22.5" repeatCount="indefinite" />
	      </circle>
	      <circle cx="0" cy="25" r="17.5" style="fill: red; stroke: black; stroke-width: 5;"></circle>
	    </g>
	  </g>
		<g id="finalBoss" visibility="hidden">
	    <g id="finalBossTransform" transform="translate(0 0)">
	      <circle cx="0" cy="0" r="50" style="fill: rgb(5, 177, 255); stroke: black;"></circle>
	      <circle cx="-15" cy="-22.5" r="10" style="fill: red; stroke: black;"></circle>
	      <circle cx="15" cy="-22.5" r="10" style="fill: red; stroke: black;"></circle>
	      <circle cx="-15" cy="-17.5" r="5" style="fill: black; stroke: black;">
	        <animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="1s" values="0 -15 -22.5; 360 -15 -22.5" repeatCount="indefinite" />
	      </circle>
	      <circle cx="15" cy="-17.5" r="5" style="fill: black; stroke: black;">
	        <animateTransform attributeName="transform" type="rotate" additive="sum" begin="0s" dur="1s" values="0 15 -22.5; 360 15 -22.5" repeatCount="indefinite" />
	      </circle>
	      <circle cx="0" cy="25" r="17.5" style="fill: red; stroke: black; stroke-width: 2;"></circle>
	    </g>
	  </g>
		<g id="finalBossHealthBar" visibility="hidden">
			<rect x="200" y="50" width="600" height="50" style="stroke: black; opacity: 0.25;"></rect>
			<rect x="200" y="50" width="600" height="50" style="stroke: black; fill: red;" id="actualFinalBossHealth"></rect>
		</g>
	</g>
	<g id="gameOver" visibility="hidden">
		<text id="gameOverText" x="200" y="150" style="fill: red; font-Size: 100px;" visibility="hidden">GAME OVER</text>
		<text id="gameOverWinText" x="250" y="150" style="fill: red; font-Size: 100px;" visibility="hidden">YOU WIN!</text>
		<g id="gameOverRestart" onmousedown="void(0)">
			<rect x="350" y="350" width="300" height="100" style="fill: url(#buttonGrad);"></rect>
			<text x="390" y="420" style="font-Size: 50px; fill: black;">RESTART</text>
		</g>
	</g>
	<html:audio src="assets/background.ogg" id="backgroundMusic" autoplay="autoplay" loop="loop"></html:audio>
	<html:audio src="assets/button-click.ogg" id="buttonClick"></html:audio>
	<html:audio src="assets/gunshot.ogg" id="gunshotSFX"></html:audio>
	<html:audio src="assets/scream.ogg" id="playerScream"></html:audio>
</svg>
